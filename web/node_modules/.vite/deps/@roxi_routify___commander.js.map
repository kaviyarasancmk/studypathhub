{
  "version": 3,
  "sources": ["../../commander/index.js"],
  "sourcesContent": ["/**\r\n * Module dependencies.\r\n */\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst childProcess = require('child_process');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n// @ts-check\r\n\r\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\r\nclass Help {\r\n  constructor() {\r\n    this.helpWidth = undefined;\r\n    this.sortSubcommands = false;\r\n    this.sortOptions = false;\r\n  }\r\n\r\n  /**\r\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {Command[]}\r\n   */\r\n\r\n  visibleCommands(cmd) {\r\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\r\n    if (cmd._hasImplicitHelpCommand()) {\r\n      // Create a command matching the implicit help command.\r\n      const args = cmd._helpCommandnameAndArgs.split(/ +/);\r\n      const helpCommand = cmd.createCommand(args.shift())\r\n        .helpOption(false);\r\n      helpCommand.description(cmd._helpCommandDescription);\r\n      helpCommand._parseExpectedArgs(args);\r\n      visibleCommands.push(helpCommand);\r\n    }\r\n    if (this.sortSubcommands) {\r\n      visibleCommands.sort((a, b) => {\r\n        return a.name().localeCompare(b.name());\r\n      });\r\n    }\r\n    return visibleCommands;\r\n  }\r\n\r\n  /**\r\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {Option[]}\r\n   */\r\n\r\n  visibleOptions(cmd) {\r\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\r\n    // Implicit help\r\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\r\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\r\n    if (showShortHelpFlag || showLongHelpFlag) {\r\n      let helpOption;\r\n      if (!showShortHelpFlag) {\r\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\r\n      } else if (!showLongHelpFlag) {\r\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\r\n      } else {\r\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\r\n      }\r\n      visibleOptions.push(helpOption);\r\n    }\r\n    if (this.sortOptions) {\r\n      const getSortKey = (option) => {\r\n        // WYSIWYG for order displayed in help with short before long, no special handling for negated.\r\n        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\r\n      };\r\n      visibleOptions.sort((a, b) => {\r\n        return getSortKey(a).localeCompare(getSortKey(b));\r\n      });\r\n    }\r\n    return visibleOptions;\r\n  }\r\n\r\n  /**\r\n   * Get an array of the arguments which have descriptions.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {{ term: string, description:string }[]}\r\n   */\r\n\r\n  visibleArguments(cmd) {\r\n    if (cmd._argsDescription && cmd._args.length) {\r\n      return cmd._args.map((argument) => {\r\n        return { term: argument.name, description: cmd._argsDescription[argument.name] || '' };\r\n      }, 0);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get the command term to show in the list of subcommands.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {string}\r\n   */\r\n\r\n  subcommandTerm(cmd) {\r\n    // Legacy. Ignores custom usage string, and nested commands.\r\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\r\n    return cmd._name +\r\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\r\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\r\n      (args ? ' ' + args : '');\r\n  }\r\n\r\n  /**\r\n   * Get the option term to show in the list of options.\r\n   *\r\n   * @param {Option} option\r\n   * @returns {string}\r\n   */\r\n\r\n  optionTerm(option) {\r\n    return option.flags;\r\n  }\r\n\r\n  /**\r\n   * Get the longest command term length.\r\n   *\r\n   * @param {Command} cmd\r\n   * @param {Help} helper\r\n   * @returns {number}\r\n   */\r\n\r\n  longestSubcommandTermLength(cmd, helper) {\r\n    return helper.visibleCommands(cmd).reduce((max, command) => {\r\n      return Math.max(max, helper.subcommandTerm(command).length);\r\n    }, 0);\r\n  };\r\n\r\n  /**\r\n   * Get the longest option term length.\r\n   *\r\n   * @param {Command} cmd\r\n   * @param {Help} helper\r\n   * @returns {number}\r\n   */\r\n\r\n  longestOptionTermLength(cmd, helper) {\r\n    return helper.visibleOptions(cmd).reduce((max, option) => {\r\n      return Math.max(max, helper.optionTerm(option).length);\r\n    }, 0);\r\n  };\r\n\r\n  /**\r\n   * Get the longest argument term length.\r\n   *\r\n   * @param {Command} cmd\r\n   * @param {Help} helper\r\n   * @returns {number}\r\n   */\r\n\r\n  longestArgumentTermLength(cmd, helper) {\r\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\r\n      return Math.max(max, argument.term.length);\r\n    }, 0);\r\n  };\r\n\r\n  /**\r\n   * Get the command usage to be displayed at the top of the built-in help.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {string}\r\n   */\r\n\r\n  commandUsage(cmd) {\r\n    // Usage\r\n    let cmdName = cmd._name;\r\n    if (cmd._aliases[0]) {\r\n      cmdName = cmdName + '|' + cmd._aliases[0];\r\n    }\r\n    let parentCmdNames = '';\r\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\r\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\r\n    }\r\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\r\n  }\r\n\r\n  /**\r\n   * Get the description for the command.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {string}\r\n   */\r\n\r\n  commandDescription(cmd) {\r\n    // @ts-ignore: overloaded return type\r\n    return cmd.description();\r\n  }\r\n\r\n  /**\r\n   * Get the command description to show in the list of subcommands.\r\n   *\r\n   * @param {Command} cmd\r\n   * @returns {string}\r\n   */\r\n\r\n  subcommandDescription(cmd) {\r\n    // @ts-ignore: overloaded return type\r\n    return cmd.description();\r\n  }\r\n\r\n  /**\r\n   * Get the option description to show in the list of options.\r\n   *\r\n   * @param {Option} option\r\n   * @return {string}\r\n   */\r\n\r\n  optionDescription(option) {\r\n    if (option.negate) {\r\n      return option.description;\r\n    }\r\n    const extraInfo = [];\r\n    if (option.argChoices) {\r\n      extraInfo.push(\r\n        // use stringify to match the display of the default value\r\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\r\n    }\r\n    if (option.defaultValue !== undefined) {\r\n      extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\r\n    }\r\n    if (extraInfo.length > 0) {\r\n      return `${option.description} (${extraInfo.join(', ')})`;\r\n    }\r\n    return option.description;\r\n  };\r\n\r\n  /**\r\n   * Generate the built-in help text.\r\n   *\r\n   * @param {Command} cmd\r\n   * @param {Help} helper\r\n   * @returns {string}\r\n   */\r\n\r\n  formatHelp(cmd, helper) {\r\n    const termWidth = helper.padWidth(cmd, helper);\r\n    const helpWidth = helper.helpWidth || 80;\r\n    const itemIndentWidth = 2;\r\n    const itemSeparatorWidth = 2; // between term and description\r\n    function formatItem(term, description) {\r\n      if (description) {\r\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\r\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\r\n      }\r\n      return term;\r\n    };\r\n    function formatList(textArray) {\r\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\r\n    }\r\n\r\n    // Usage\r\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\r\n\r\n    // Description\r\n    const commandDescription = helper.commandDescription(cmd);\r\n    if (commandDescription.length > 0) {\r\n      output = output.concat([commandDescription, '']);\r\n    }\r\n\r\n    // Arguments\r\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\r\n      return formatItem(argument.term, argument.description);\r\n    });\r\n    if (argumentList.length > 0) {\r\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\r\n    }\r\n\r\n    // Options\r\n    const optionList = helper.visibleOptions(cmd).map((option) => {\r\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\r\n    });\r\n    if (optionList.length > 0) {\r\n      output = output.concat(['Options:', formatList(optionList), '']);\r\n    }\r\n\r\n    // Commands\r\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\r\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\r\n    });\r\n    if (commandList.length > 0) {\r\n      output = output.concat(['Commands:', formatList(commandList), '']);\r\n    }\r\n\r\n    return output.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Calculate the pad width from the maximum term length.\r\n   *\r\n   * @param {Command} cmd\r\n   * @param {Help} helper\r\n   * @returns {number}\r\n   */\r\n\r\n  padWidth(cmd, helper) {\r\n    return Math.max(\r\n      helper.longestOptionTermLength(cmd, helper),\r\n      helper.longestSubcommandTermLength(cmd, helper),\r\n      helper.longestArgumentTermLength(cmd, helper)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Wrap the given string to width characters per line, with lines after the first indented.\r\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\r\n   *\r\n   * @param {string} str\r\n   * @param {number} width\r\n   * @param {number} indent\r\n   * @param {number} [minColumnWidth=40]\r\n   * @return {string}\r\n   *\r\n   */\r\n\r\n  wrap(str, width, indent, minColumnWidth = 40) {\r\n    // Detect manually wrapped and indented strings by searching for line breaks\r\n    // followed by multiple spaces/tabs.\r\n    if (str.match(/[\\n]\\s+/)) return str;\r\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\r\n    const columnWidth = width - indent;\r\n    if (columnWidth < minColumnWidth) return str;\r\n\r\n    const leadingStr = str.substr(0, indent);\r\n    const columnText = str.substr(indent);\r\n\r\n    const indentString = ' '.repeat(indent);\r\n    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\r\n    const lines = columnText.match(regex) || [];\r\n    return leadingStr + lines.map((line, i) => {\r\n      if (line.slice(-1) === '\\n') {\r\n        line = line.slice(0, line.length - 1);\r\n      }\r\n      return ((i > 0) ? indentString : '') + line.trimRight();\r\n    }).join('\\n');\r\n  }\r\n}\r\n\r\nclass Option {\r\n  /**\r\n   * Initialize a new `Option` with the given `flags` and `description`.\r\n   *\r\n   * @param {string} flags\r\n   * @param {string} [description]\r\n   */\r\n\r\n  constructor(flags, description) {\r\n    this.flags = flags;\r\n    this.description = description || '';\r\n\r\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\r\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\r\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\r\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\r\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\r\n    const optionFlags = _parseOptionFlags(flags);\r\n    this.short = optionFlags.shortFlag;\r\n    this.long = optionFlags.longFlag;\r\n    this.negate = false;\r\n    if (this.long) {\r\n      this.negate = this.long.startsWith('--no-');\r\n    }\r\n    this.defaultValue = undefined;\r\n    this.defaultValueDescription = undefined;\r\n    this.parseArg = undefined;\r\n    this.hidden = false;\r\n    this.argChoices = undefined;\r\n  }\r\n\r\n  /**\r\n   * Set the default value, and optionally supply the description to be displayed in the help.\r\n   *\r\n   * @param {any} value\r\n   * @param {string} [description]\r\n   * @return {Option}\r\n   */\r\n\r\n  default(value, description) {\r\n    this.defaultValue = value;\r\n    this.defaultValueDescription = description;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set the custom handler for processing CLI option arguments into option values.\r\n   *\r\n   * @param {Function} [fn]\r\n   * @return {Option}\r\n   */\r\n\r\n  argParser(fn) {\r\n    this.parseArg = fn;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Whether the option is mandatory and must have a value after parsing.\r\n   *\r\n   * @param {boolean} [mandatory=true]\r\n   * @return {Option}\r\n   */\r\n\r\n  makeOptionMandatory(mandatory = true) {\r\n    this.mandatory = !!mandatory;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Hide option in help.\r\n   *\r\n   * @param {boolean} [hide=true]\r\n   * @return {Option}\r\n   */\r\n\r\n  hideHelp(hide = true) {\r\n    this.hidden = !!hide;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n\r\n  _concatValue(value, previous) {\r\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\r\n      return [value];\r\n    }\r\n\r\n    return previous.concat(value);\r\n  }\r\n\r\n  /**\r\n   * Only allow option value to be one of choices.\r\n   *\r\n   * @param {string[]} values\r\n   * @return {Option}\r\n   */\r\n\r\n  choices(values) {\r\n    this.argChoices = values;\r\n    this.parseArg = (arg, previous) => {\r\n      if (!values.includes(arg)) {\r\n        throw new InvalidOptionArgumentError(`Allowed choices are ${values.join(', ')}.`);\r\n      }\r\n      if (this.variadic) {\r\n        return this._concatValue(arg, previous);\r\n      }\r\n      return arg;\r\n    };\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Return option name.\r\n   *\r\n   * @return {string}\r\n   */\r\n\r\n  name() {\r\n    if (this.long) {\r\n      return this.long.replace(/^--/, '');\r\n    }\r\n    return this.short.replace(/^-/, '');\r\n  };\r\n\r\n  /**\r\n   * Return option name, in a camelcase format that can be used\r\n   * as a object attribute key.\r\n   *\r\n   * @return {string}\r\n   * @api private\r\n   */\r\n\r\n  attributeName() {\r\n    return camelcase(this.name().replace(/^no-/, ''));\r\n  };\r\n\r\n  /**\r\n   * Check if `arg` matches the short or long flag.\r\n   *\r\n   * @param {string} arg\r\n   * @return {boolean}\r\n   * @api private\r\n   */\r\n\r\n  is(arg) {\r\n    return this.short === arg || this.long === arg;\r\n  };\r\n}\r\n\r\n/**\r\n * CommanderError class\r\n * @class\r\n */\r\nclass CommanderError extends Error {\r\n  /**\r\n   * Constructs the CommanderError class\r\n   * @param {number} exitCode suggested exit code which could be used with process.exit\r\n   * @param {string} code an id string representing the error\r\n   * @param {string} message human-readable description of the error\r\n   * @constructor\r\n   */\r\n  constructor(exitCode, code, message) {\r\n    super(message);\r\n    // properly capture stack trace in Node.js\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = this.constructor.name;\r\n    this.code = code;\r\n    this.exitCode = exitCode;\r\n    this.nestedError = undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * InvalidOptionArgumentError class\r\n * @class\r\n */\r\nclass InvalidOptionArgumentError extends CommanderError {\r\n  /**\r\n   * Constructs the InvalidOptionArgumentError class\r\n   * @param {string} [message] explanation of why argument is invalid\r\n   * @constructor\r\n   */\r\n  constructor(message) {\r\n    super(1, 'commander.invalidOptionArgument', message);\r\n    // properly capture stack trace in Node.js\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = this.constructor.name;\r\n  }\r\n}\r\n\r\nclass Command extends EventEmitter {\r\n  /**\r\n   * Initialize a new `Command`.\r\n   *\r\n   * @param {string} [name]\r\n   */\r\n\r\n  constructor(name) {\r\n    super();\r\n    this.commands = [];\r\n    this.options = [];\r\n    this.parent = null;\r\n    this._allowUnknownOption = false;\r\n    this._allowExcessArguments = true;\r\n    this._args = [];\r\n    this.rawArgs = null;\r\n    this._scriptPath = null;\r\n    this._name = name || '';\r\n    this._optionValues = {};\r\n    this._storeOptionsAsProperties = false;\r\n    this._actionResults = [];\r\n    this._actionHandler = null;\r\n    this._executableHandler = false;\r\n    this._executableFile = null; // custom name for executable\r\n    this._defaultCommandName = null;\r\n    this._exitCallback = null;\r\n    this._aliases = [];\r\n    this._combineFlagAndOptionalValue = true;\r\n    this._description = '';\r\n    this._argsDescription = undefined;\r\n    this._enablePositionalOptions = false;\r\n    this._passThroughOptions = false;\r\n\r\n    // see .configureOutput() for docs\r\n    this._outputConfiguration = {\r\n      writeOut: (str) => process.stdout.write(str),\r\n      writeErr: (str) => process.stderr.write(str),\r\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\r\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\r\n      outputError: (str, write) => write(str)\r\n    };\r\n\r\n    this._hidden = false;\r\n    this._hasHelpOption = true;\r\n    this._helpFlags = '-h, --help';\r\n    this._helpDescription = 'display help for command';\r\n    this._helpShortFlag = '-h';\r\n    this._helpLongFlag = '--help';\r\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\r\n    this._helpCommandName = 'help';\r\n    this._helpCommandnameAndArgs = 'help [command]';\r\n    this._helpCommandDescription = 'display help for command';\r\n    this._helpConfiguration = {};\r\n  }\r\n\r\n  /**\r\n   * Define a command.\r\n   *\r\n   * There are two styles of command: pay attention to where to put the description.\r\n   *\r\n   * Examples:\r\n   *\r\n   *      // Command implemented using action handler (description is supplied separately to `.command`)\r\n   *      program\r\n   *        .command('clone <source> [destination]')\r\n   *        .description('clone a repository into a newly created directory')\r\n   *        .action((source, destination) => {\r\n   *          console.log('clone command called');\r\n   *        });\r\n   *\r\n   *      // Command implemented using separate executable file (description is second parameter to `.command`)\r\n   *      program\r\n   *        .command('start <service>', 'start named service')\r\n   *        .command('stop [service]', 'stop named service, or all if no name supplied');\r\n   *\r\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\r\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\r\n   * @param {Object} [execOpts] - configuration options (for executable)\r\n   * @return {Command} returns new command for action handler, or `this` for executable command\r\n   */\r\n\r\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\r\n    let desc = actionOptsOrExecDesc;\r\n    let opts = execOpts;\r\n    if (typeof desc === 'object' && desc !== null) {\r\n      opts = desc;\r\n      desc = null;\r\n    }\r\n    opts = opts || {};\r\n    const args = nameAndArgs.split(/ +/);\r\n    const cmd = this.createCommand(args.shift());\r\n\r\n    if (desc) {\r\n      cmd.description(desc);\r\n      cmd._executableHandler = true;\r\n    }\r\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\r\n\r\n    cmd._outputConfiguration = this._outputConfiguration;\r\n\r\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\r\n    cmd._hasHelpOption = this._hasHelpOption;\r\n    cmd._helpFlags = this._helpFlags;\r\n    cmd._helpDescription = this._helpDescription;\r\n    cmd._helpShortFlag = this._helpShortFlag;\r\n    cmd._helpLongFlag = this._helpLongFlag;\r\n    cmd._helpCommandName = this._helpCommandName;\r\n    cmd._helpCommandnameAndArgs = this._helpCommandnameAndArgs;\r\n    cmd._helpCommandDescription = this._helpCommandDescription;\r\n    cmd._helpConfiguration = this._helpConfiguration;\r\n    cmd._exitCallback = this._exitCallback;\r\n    cmd._storeOptionsAsProperties = this._storeOptionsAsProperties;\r\n    cmd._combineFlagAndOptionalValue = this._combineFlagAndOptionalValue;\r\n    cmd._allowExcessArguments = this._allowExcessArguments;\r\n    cmd._enablePositionalOptions = this._enablePositionalOptions;\r\n\r\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\r\n    this.commands.push(cmd);\r\n    cmd._parseExpectedArgs(args);\r\n    cmd.parent = this;\r\n\r\n    if (desc) return this;\r\n    return cmd;\r\n  };\r\n\r\n  /**\r\n   * Factory routine to create a new unattached command.\r\n   *\r\n   * See .command() for creating an attached subcommand, which uses this routine to\r\n   * create the command. You can override createCommand to customise subcommands.\r\n   *\r\n   * @param {string} [name]\r\n   * @return {Command} new command\r\n   */\r\n\r\n  createCommand(name) {\r\n    return new Command(name);\r\n  };\r\n\r\n  /**\r\n   * You can customise the help with a subclass of Help by overriding createHelp,\r\n   * or by overriding Help properties using configureHelp().\r\n   *\r\n   * @return {Help}\r\n   */\r\n\r\n  createHelp() {\r\n    return Object.assign(new Help(), this.configureHelp());\r\n  };\r\n\r\n  /**\r\n   * You can customise the help by overriding Help properties using configureHelp(),\r\n   * or with a subclass of Help by overriding createHelp().\r\n   *\r\n   * @param {Object} [configuration] - configuration options\r\n   * @return {Command|Object} `this` command for chaining, or stored configuration\r\n   */\r\n\r\n  configureHelp(configuration) {\r\n    if (configuration === undefined) return this._helpConfiguration;\r\n\r\n    this._helpConfiguration = configuration;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The default output goes to stdout and stderr. You can customise this for special\r\n   * applications. You can also customise the display of errors by overriding outputError.\r\n   *\r\n   * The configuration properties are all functions:\r\n   *\r\n   *    // functions to change where being written, stdout and stderr\r\n   *    writeOut(str)\r\n   *    writeErr(str)\r\n   *    // matching functions to specify width for wrapping help\r\n   *    getOutHelpWidth()\r\n   *    getErrHelpWidth()\r\n   *    // functions based on what is being written out\r\n   *    outputError(str, write) // used for displaying errors, and not used for displaying help\r\n   *\r\n   * @param {Object} [configuration] - configuration options\r\n   * @return {Command|Object} `this` command for chaining, or stored configuration\r\n   */\r\n\r\n  configureOutput(configuration) {\r\n    if (configuration === undefined) return this._outputConfiguration;\r\n\r\n    Object.assign(this._outputConfiguration, configuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a prepared subcommand.\r\n   *\r\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\r\n   *\r\n   * @param {Command} cmd - new subcommand\r\n   * @param {Object} [opts] - configuration options\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  addCommand(cmd, opts) {\r\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\r\n\r\n    // To keep things simple, block automatic name generation for deeply nested executables.\r\n    // Fail fast and detect when adding rather than later when parsing.\r\n    function checkExplicitNames(commandArray) {\r\n      commandArray.forEach((cmd) => {\r\n        if (cmd._executableHandler && !cmd._executableFile) {\r\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\r\n        }\r\n        checkExplicitNames(cmd.commands);\r\n      });\r\n    }\r\n    checkExplicitNames(cmd.commands);\r\n\r\n    opts = opts || {};\r\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\r\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\r\n\r\n    this.commands.push(cmd);\r\n    cmd.parent = this;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Define argument syntax for the command.\r\n   */\r\n\r\n  arguments(desc) {\r\n    return this._parseExpectedArgs(desc.split(/ +/));\r\n  };\r\n\r\n  /**\r\n   * Override default decision whether to add implicit help command.\r\n   *\r\n   *    addHelpCommand() // force on\r\n   *    addHelpCommand(false); // force off\r\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\r\n   *\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  addHelpCommand(enableOrNameAndArgs, description) {\r\n    if (enableOrNameAndArgs === false) {\r\n      this._addImplicitHelpCommand = false;\r\n    } else {\r\n      this._addImplicitHelpCommand = true;\r\n      if (typeof enableOrNameAndArgs === 'string') {\r\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\r\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\r\n      }\r\n      this._helpCommandDescription = description || this._helpCommandDescription;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * @return {boolean}\r\n   * @api private\r\n   */\r\n\r\n  _hasImplicitHelpCommand() {\r\n    if (this._addImplicitHelpCommand === undefined) {\r\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\r\n    }\r\n    return this._addImplicitHelpCommand;\r\n  };\r\n\r\n  /**\r\n   * Parse expected `args`.\r\n   *\r\n   * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\r\n   *\r\n   * @param {Array} args\r\n   * @return {Command} `this` command for chaining\r\n   * @api private\r\n   */\r\n\r\n  _parseExpectedArgs(args) {\r\n    if (!args.length) return;\r\n    args.forEach((arg) => {\r\n      const argDetails = {\r\n        required: false,\r\n        name: '',\r\n        variadic: false\r\n      };\r\n\r\n      switch (arg[0]) {\r\n        case '<':\r\n          argDetails.required = true;\r\n          argDetails.name = arg.slice(1, -1);\r\n          break;\r\n        case '[':\r\n          argDetails.name = arg.slice(1, -1);\r\n          break;\r\n      }\r\n\r\n      if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\r\n        argDetails.variadic = true;\r\n        argDetails.name = argDetails.name.slice(0, -3);\r\n      }\r\n      if (argDetails.name) {\r\n        this._args.push(argDetails);\r\n      }\r\n    });\r\n    this._args.forEach((arg, i) => {\r\n      if (arg.variadic && i < this._args.length - 1) {\r\n        throw new Error(`only the last argument can be variadic '${arg.name}'`);\r\n      }\r\n    });\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Register callback to use as replacement for calling process.exit.\r\n   *\r\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  exitOverride(fn) {\r\n    if (fn) {\r\n      this._exitCallback = fn;\r\n    } else {\r\n      this._exitCallback = (err) => {\r\n        if (err.code !== 'commander.executeSubCommandAsync') {\r\n          throw err;\r\n        } else {\r\n          // Async callback from spawn events, not useful to throw.\r\n        }\r\n      };\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Call process.exit, and _exitCallback if defined.\r\n   *\r\n   * @param {number} exitCode exit code for using with process.exit\r\n   * @param {string} code an id string representing the error\r\n   * @param {string} message human-readable description of the error\r\n   * @return never\r\n   * @api private\r\n   */\r\n\r\n  _exit(exitCode, code, message) {\r\n    if (this._exitCallback) {\r\n      this._exitCallback(new CommanderError(exitCode, code, message));\r\n      // Expecting this line is not reached.\r\n    }\r\n    process.exit(exitCode);\r\n  };\r\n\r\n  /**\r\n   * Register callback `fn` for the command.\r\n   *\r\n   * Examples:\r\n   *\r\n   *      program\r\n   *        .command('help')\r\n   *        .description('display verbose help')\r\n   *        .action(function() {\r\n   *           // output help here\r\n   *        });\r\n   *\r\n   * @param {Function} fn\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  action(fn) {\r\n    const listener = (args) => {\r\n      // The .action callback takes an extra parameter which is the command or options.\r\n      const expectedArgsCount = this._args.length;\r\n      const actionArgs = args.slice(0, expectedArgsCount);\r\n      if (this._storeOptionsAsProperties) {\r\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\r\n      } else {\r\n        actionArgs[expectedArgsCount] = this.opts();\r\n      }\r\n      actionArgs.push(this);\r\n\r\n      const actionResult = fn.apply(this, actionArgs);\r\n      // Remember result in case it is async. Assume parseAsync getting called on root.\r\n      let rootCommand = this;\r\n      while (rootCommand.parent) {\r\n        rootCommand = rootCommand.parent;\r\n      }\r\n      rootCommand._actionResults.push(actionResult);\r\n    };\r\n    this._actionHandler = listener;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Factory routine to create a new unattached option.\r\n   *\r\n   * See .option() for creating an attached option, which uses this routine to\r\n   * create the option. You can override createOption to return a custom option.\r\n   *\r\n   * @param {string} flags\r\n   * @param {string} [description]\r\n   * @return {Option} new option\r\n   */\r\n\r\n  createOption(flags, description) {\r\n    return new Option(flags, description);\r\n  };\r\n\r\n  /**\r\n   * Add an option.\r\n   *\r\n   * @param {Option} option\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n  addOption(option) {\r\n    const oname = option.name();\r\n    const name = option.attributeName();\r\n\r\n    let defaultValue = option.defaultValue;\r\n\r\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\r\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\r\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\r\n      if (option.negate) {\r\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\r\n        defaultValue = this._findOption(positiveLongFlag) ? this._getOptionValue(name) : true;\r\n      }\r\n      // preassign only if we have a default\r\n      if (defaultValue !== undefined) {\r\n        this._setOptionValue(name, defaultValue);\r\n      }\r\n    }\r\n\r\n    // register the option\r\n    this.options.push(option);\r\n\r\n    // when it's passed assign the value\r\n    // and conditionally invoke the callback\r\n    this.on('option:' + oname, (val) => {\r\n      const oldValue = this._getOptionValue(name);\r\n\r\n      // custom processing\r\n      if (val !== null && option.parseArg) {\r\n        try {\r\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\r\n        } catch (err) {\r\n          if (err.code === 'commander.invalidOptionArgument') {\r\n            const message = `error: option '${option.flags}' argument '${val}' is invalid. ${err.message}`;\r\n            this._displayError(err.exitCode, err.code, message);\r\n          }\r\n          throw err;\r\n        }\r\n      } else if (val !== null && option.variadic) {\r\n        val = option._concatValue(val, oldValue);\r\n      }\r\n\r\n      // unassigned or boolean value\r\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\r\n        // if no value, negate false, and we have a default, then use it!\r\n        if (val == null) {\r\n          this._setOptionValue(name, option.negate\r\n            ? false\r\n            : defaultValue || true);\r\n        } else {\r\n          this._setOptionValue(name, val);\r\n        }\r\n      } else if (val !== null) {\r\n        // reassign\r\n        this._setOptionValue(name, option.negate ? false : val);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Internal implementation shared by .option() and .requiredOption()\r\n   *\r\n   * @api private\r\n   */\r\n  _optionEx(config, flags, description, fn, defaultValue) {\r\n    const option = this.createOption(flags, description);\r\n    option.makeOptionMandatory(!!config.mandatory);\r\n    if (typeof fn === 'function') {\r\n      option.default(defaultValue).argParser(fn);\r\n    } else if (fn instanceof RegExp) {\r\n      // deprecated\r\n      const regex = fn;\r\n      fn = (val, def) => {\r\n        const m = regex.exec(val);\r\n        return m ? m[0] : def;\r\n      };\r\n      option.default(defaultValue).argParser(fn);\r\n    } else {\r\n      option.default(fn);\r\n    }\r\n\r\n    return this.addOption(option);\r\n  }\r\n\r\n  /**\r\n   * Define option with `flags`, `description` and optional\r\n   * coercion `fn`.\r\n   *\r\n   * The `flags` string contains the short and/or long flags,\r\n   * separated by comma, a pipe or space. The following are all valid\r\n   * all will output this way when `--help` is used.\r\n   *\r\n   *    \"-p, --pepper\"\r\n   *    \"-p|--pepper\"\r\n   *    \"-p --pepper\"\r\n   *\r\n   * Examples:\r\n   *\r\n   *     // simple boolean defaulting to undefined\r\n   *     program.option('-p, --pepper', 'add pepper');\r\n   *\r\n   *     program.pepper\r\n   *     // => undefined\r\n   *\r\n   *     --pepper\r\n   *     program.pepper\r\n   *     // => true\r\n   *\r\n   *     // simple boolean defaulting to true (unless non-negated option is also defined)\r\n   *     program.option('-C, --no-cheese', 'remove cheese');\r\n   *\r\n   *     program.cheese\r\n   *     // => true\r\n   *\r\n   *     --no-cheese\r\n   *     program.cheese\r\n   *     // => false\r\n   *\r\n   *     // required argument\r\n   *     program.option('-C, --chdir <path>', 'change the working directory');\r\n   *\r\n   *     --chdir /tmp\r\n   *     program.chdir\r\n   *     // => \"/tmp\"\r\n   *\r\n   *     // optional argument\r\n   *     program.option('-c, --cheese [type]', 'add cheese [marble]');\r\n   *\r\n   * @param {string} flags\r\n   * @param {string} [description]\r\n   * @param {Function|*} [fn] - custom option processing function or default value\r\n   * @param {*} [defaultValue]\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  option(flags, description, fn, defaultValue) {\r\n    return this._optionEx({}, flags, description, fn, defaultValue);\r\n  };\r\n\r\n  /**\r\n  * Add a required option which must have a value after parsing. This usually means\r\n  * the option must be specified on the command line. (Otherwise the same as .option().)\r\n  *\r\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\r\n  *\r\n  * @param {string} flags\r\n  * @param {string} [description]\r\n  * @param {Function|*} [fn] - custom option processing function or default value\r\n  * @param {*} [defaultValue]\r\n  * @return {Command} `this` command for chaining\r\n  */\r\n\r\n  requiredOption(flags, description, fn, defaultValue) {\r\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\r\n  };\r\n\r\n  /**\r\n   * Alter parsing of short flags with optional values.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // for `.option('-f,--flag [value]'):\r\n   *    .combineFlagAndOptionalValue(true)  // `-f80` is treated like `--flag=80`, this is the default behaviour\r\n   *    .combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\r\n   *\r\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\r\n   */\r\n  combineFlagAndOptionalValue(combine = true) {\r\n    this._combineFlagAndOptionalValue = !!combine;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Allow unknown options on the command line.\r\n   *\r\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\r\n   * for unknown options.\r\n   */\r\n  allowUnknownOption(allowUnknown = true) {\r\n    this._allowUnknownOption = !!allowUnknown;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\r\n   *\r\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\r\n   * for excess arguments.\r\n   */\r\n  allowExcessArguments(allowExcess = true) {\r\n    this._allowExcessArguments = !!allowExcess;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Enable positional options. Positional means global options are specified before subcommands which lets\r\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\r\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\r\n   *\r\n   * @param {Boolean} [positional=true]\r\n   */\r\n  enablePositionalOptions(positional = true) {\r\n    this._enablePositionalOptions = !!positional;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Pass through options that come after command-arguments rather than treat them as command-options,\r\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\r\n   * positional options to have been enabled on the program (parent commands).\r\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\r\n   *\r\n   * @param {Boolean} [passThrough=true]\r\n   * for unknown options.\r\n   */\r\n  passThroughOptions(passThrough = true) {\r\n    this._passThroughOptions = !!passThrough;\r\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\r\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n    * Whether to store option values as properties on command object,\r\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\r\n    *\r\n    * @param {boolean} [storeAsProperties=true]\r\n    * @return {Command} `this` command for chaining\r\n    */\r\n\r\n  storeOptionsAsProperties(storeAsProperties = true) {\r\n    this._storeOptionsAsProperties = !!storeAsProperties;\r\n    if (this.options.length) {\r\n      throw new Error('call .storeOptionsAsProperties() before adding options');\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Store option value\r\n   *\r\n   * @param {string} key\r\n   * @param {Object} value\r\n   * @api private\r\n   */\r\n\r\n  _setOptionValue(key, value) {\r\n    if (this._storeOptionsAsProperties) {\r\n      this[key] = value;\r\n    } else {\r\n      this._optionValues[key] = value;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve option value\r\n   *\r\n   * @param {string} key\r\n   * @return {Object} value\r\n   * @api private\r\n   */\r\n\r\n  _getOptionValue(key) {\r\n    if (this._storeOptionsAsProperties) {\r\n      return this[key];\r\n    }\r\n    return this._optionValues[key];\r\n  };\r\n\r\n  /**\r\n   * Parse `argv`, setting options and invoking commands when defined.\r\n   *\r\n   * The default expectation is that the arguments are from node and have the application as argv[0]\r\n   * and the script being run in argv[1], with user parameters after that.\r\n   *\r\n   * Examples:\r\n   *\r\n   *      program.parse(process.argv);\r\n   *      program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\r\n   *      program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\r\n   *\r\n   * @param {string[]} [argv] - optional, defaults to process.argv\r\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\r\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  parse(argv, parseOptions) {\r\n    if (argv !== undefined && !Array.isArray(argv)) {\r\n      throw new Error('first parameter to parse must be array or undefined');\r\n    }\r\n    parseOptions = parseOptions || {};\r\n\r\n    // Default to using process.argv\r\n    if (argv === undefined) {\r\n      argv = process.argv;\r\n      // @ts-ignore: unknown property\r\n      if (process.versions && process.versions.electron) {\r\n        parseOptions.from = 'electron';\r\n      }\r\n    }\r\n    this.rawArgs = argv.slice();\r\n\r\n    // make it a little easier for callers by supporting various argv conventions\r\n    let userArgs;\r\n    switch (parseOptions.from) {\r\n      case undefined:\r\n      case 'node':\r\n        this._scriptPath = argv[1];\r\n        userArgs = argv.slice(2);\r\n        break;\r\n      case 'electron':\r\n        // @ts-ignore: unknown property\r\n        if (process.defaultApp) {\r\n          this._scriptPath = argv[1];\r\n          userArgs = argv.slice(2);\r\n        } else {\r\n          userArgs = argv.slice(1);\r\n        }\r\n        break;\r\n      case 'user':\r\n        userArgs = argv.slice(0);\r\n        break;\r\n      default:\r\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\r\n    }\r\n    if (!this._scriptPath && require.main) {\r\n      this._scriptPath = require.main.filename;\r\n    }\r\n\r\n    // Guess name, used in usage in help.\r\n    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));\r\n\r\n    // Let's go!\r\n    this._parseCommand([], userArgs);\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Parse `argv`, setting options and invoking commands when defined.\r\n   *\r\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\r\n   *\r\n   * The default expectation is that the arguments are from node and have the application as argv[0]\r\n   * and the script being run in argv[1], with user parameters after that.\r\n   *\r\n   * Examples:\r\n   *\r\n   *      program.parseAsync(process.argv);\r\n   *      program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\r\n   *      program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\r\n   *\r\n   * @param {string[]} [argv]\r\n   * @param {Object} [parseOptions]\r\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\r\n   * @return {Promise}\r\n   */\r\n\r\n  parseAsync(argv, parseOptions) {\r\n    this.parse(argv, parseOptions);\r\n    return Promise.all(this._actionResults).then(() => this);\r\n  };\r\n\r\n  /**\r\n   * Execute a sub-command executable.\r\n   *\r\n   * @api private\r\n   */\r\n\r\n  _executeSubCommand(subcommand, args) {\r\n    args = args.slice();\r\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\r\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\r\n\r\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\r\n    this._checkForMissingMandatoryOptions();\r\n\r\n    // Want the entry script as the reference for command name and directory for searching for other files.\r\n    let scriptPath = this._scriptPath;\r\n    // Fallback in case not set, due to how Command created or called.\r\n    if (!scriptPath && require.main) {\r\n      scriptPath = require.main.filename;\r\n    }\r\n\r\n    let baseDir;\r\n    try {\r\n      const resolvedLink = fs.realpathSync(scriptPath);\r\n      baseDir = path.dirname(resolvedLink);\r\n    } catch (e) {\r\n      baseDir = '.'; // dummy, probably not going to find executable!\r\n    }\r\n\r\n    // name of the subcommand, like `pm-install`\r\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\r\n    if (subcommand._executableFile) {\r\n      bin = subcommand._executableFile;\r\n    }\r\n\r\n    const localBin = path.join(baseDir, bin);\r\n    if (fs.existsSync(localBin)) {\r\n      // prefer local `./<bin>` to bin in the $PATH\r\n      bin = localBin;\r\n    } else {\r\n      // Look for source files.\r\n      sourceExt.forEach((ext) => {\r\n        if (fs.existsSync(`${localBin}${ext}`)) {\r\n          bin = `${localBin}${ext}`;\r\n        }\r\n      });\r\n    }\r\n    launchWithNode = sourceExt.includes(path.extname(bin));\r\n\r\n    let proc;\r\n    if (process.platform !== 'win32') {\r\n      if (launchWithNode) {\r\n        args.unshift(bin);\r\n        // add executable arguments to spawn\r\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\r\n\r\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\r\n      } else {\r\n        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });\r\n      }\r\n    } else {\r\n      args.unshift(bin);\r\n      // add executable arguments to spawn\r\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\r\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\r\n    }\r\n\r\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\r\n    signals.forEach((signal) => {\r\n      // @ts-ignore\r\n      process.on(signal, () => {\r\n        if (proc.killed === false && proc.exitCode === null) {\r\n          proc.kill(signal);\r\n        }\r\n      });\r\n    });\r\n\r\n    // By default terminate process when spawned process terminates.\r\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\r\n    const exitCallback = this._exitCallback;\r\n    if (!exitCallback) {\r\n      proc.on('close', process.exit.bind(process));\r\n    } else {\r\n      proc.on('close', () => {\r\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\r\n      });\r\n    }\r\n    proc.on('error', (err) => {\r\n      // @ts-ignore\r\n      if (err.code === 'ENOENT') {\r\n        const executableMissing = `'${bin}' does not exist\r\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\r\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\r\n        throw new Error(executableMissing);\r\n      // @ts-ignore\r\n      } else if (err.code === 'EACCES') {\r\n        throw new Error(`'${bin}' not executable`);\r\n      }\r\n      if (!exitCallback) {\r\n        process.exit(1);\r\n      } else {\r\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\r\n        wrappedError.nestedError = err;\r\n        exitCallback(wrappedError);\r\n      }\r\n    });\r\n\r\n    // Store the reference to the child process\r\n    this.runningCommand = proc;\r\n  };\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  _dispatchSubcommand(commandName, operands, unknown) {\r\n    const subCommand = this._findCommand(commandName);\r\n    if (!subCommand) this.help({ error: true });\r\n\r\n    if (subCommand._executableHandler) {\r\n      this._executeSubCommand(subCommand, operands.concat(unknown));\r\n    } else {\r\n      subCommand._parseCommand(operands, unknown);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Process arguments in context of this command.\r\n   *\r\n   * @api private\r\n   */\r\n\r\n  _parseCommand(operands, unknown) {\r\n    const parsed = this.parseOptions(unknown);\r\n    operands = operands.concat(parsed.operands);\r\n    unknown = parsed.unknown;\r\n    this.args = operands.concat(unknown);\r\n\r\n    if (operands && this._findCommand(operands[0])) {\r\n      this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\r\n    } else if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\r\n      if (operands.length === 1) {\r\n        this.help();\r\n      } else {\r\n        this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\r\n      }\r\n    } else if (this._defaultCommandName) {\r\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\r\n      this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\r\n    } else {\r\n      if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\r\n        // probably missing subcommand and no handler, user needs help\r\n        this.help({ error: true });\r\n      }\r\n\r\n      outputHelpIfRequested(this, parsed.unknown);\r\n      this._checkForMissingMandatoryOptions();\r\n\r\n      // We do not always call this check to avoid masking a \"better\" error, like unknown command.\r\n      const checkForUnknownOptions = () => {\r\n        if (parsed.unknown.length > 0) {\r\n          this.unknownOption(parsed.unknown[0]);\r\n        }\r\n      };\r\n\r\n      const commandEvent = `command:${this.name()}`;\r\n      if (this._actionHandler) {\r\n        checkForUnknownOptions();\r\n        // Check expected arguments and collect variadic together.\r\n        const args = this.args.slice();\r\n        this._args.forEach((arg, i) => {\r\n          if (arg.required && args[i] == null) {\r\n            this.missingArgument(arg.name);\r\n          } else if (arg.variadic) {\r\n            args[i] = args.splice(i);\r\n            args.length = Math.min(i + 1, args.length);\r\n          }\r\n        });\r\n        if (args.length > this._args.length) {\r\n          this._excessArguments(args);\r\n        }\r\n\r\n        this._actionHandler(args);\r\n        if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\r\n      } else if (this.parent && this.parent.listenerCount(commandEvent)) {\r\n        checkForUnknownOptions();\r\n        this.parent.emit(commandEvent, operands, unknown); // legacy\r\n      } else if (operands.length) {\r\n        if (this._findCommand('*')) { // legacy default command\r\n          this._dispatchSubcommand('*', operands, unknown);\r\n        } else if (this.listenerCount('command:*')) {\r\n          // skip option check, emit event for possible misspelling suggestion\r\n          this.emit('command:*', operands, unknown);\r\n        } else if (this.commands.length) {\r\n          this.unknownCommand();\r\n        } else {\r\n          checkForUnknownOptions();\r\n        }\r\n      } else if (this.commands.length) {\r\n        // This command has subcommands and nothing hooked up at this level, so display help.\r\n        this.help({ error: true });\r\n      } else {\r\n        checkForUnknownOptions();\r\n        // fall through for caller to handle after calling .parse()\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Find matching command.\r\n   *\r\n   * @api private\r\n   */\r\n  _findCommand(name) {\r\n    if (!name) return undefined;\r\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\r\n  };\r\n\r\n  /**\r\n   * Return an option matching `arg` if any.\r\n   *\r\n   * @param {string} arg\r\n   * @return {Option}\r\n   * @api private\r\n   */\r\n\r\n  _findOption(arg) {\r\n    return this.options.find(option => option.is(arg));\r\n  };\r\n\r\n  /**\r\n   * Display an error message if a mandatory option does not have a value.\r\n   * Lazy calling after checking for help flags from leaf subcommand.\r\n   *\r\n   * @api private\r\n   */\r\n\r\n  _checkForMissingMandatoryOptions() {\r\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\r\n    for (let cmd = this; cmd; cmd = cmd.parent) {\r\n      cmd.options.forEach((anOption) => {\r\n        if (anOption.mandatory && (cmd._getOptionValue(anOption.attributeName()) === undefined)) {\r\n          cmd.missingMandatoryOptionValue(anOption);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Parse options from `argv` removing known options,\r\n   * and return argv split into operands and unknown arguments.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    argv => operands, unknown\r\n   *    --known kkk op => [op], []\r\n   *    op --known kkk => [op], []\r\n   *    sub --unknown uuu op => [sub], [--unknown uuu op]\r\n   *    sub -- --unknown uuu op => [sub --unknown uuu op], []\r\n   *\r\n   * @param {String[]} argv\r\n   * @return {{operands: String[], unknown: String[]}}\r\n   */\r\n\r\n  parseOptions(argv) {\r\n    const operands = []; // operands, not options or values\r\n    const unknown = []; // first unknown option and remaining unknown args\r\n    let dest = operands;\r\n    const args = argv.slice();\r\n\r\n    function maybeOption(arg) {\r\n      return arg.length > 1 && arg[0] === '-';\r\n    }\r\n\r\n    // parse options\r\n    let activeVariadicOption = null;\r\n    while (args.length) {\r\n      const arg = args.shift();\r\n\r\n      // literal\r\n      if (arg === '--') {\r\n        if (dest === unknown) dest.push(arg);\r\n        dest.push(...args);\r\n        break;\r\n      }\r\n\r\n      if (activeVariadicOption && !maybeOption(arg)) {\r\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\r\n        continue;\r\n      }\r\n      activeVariadicOption = null;\r\n\r\n      if (maybeOption(arg)) {\r\n        const option = this._findOption(arg);\r\n        // recognised option, call listener to assign value with possible custom processing\r\n        if (option) {\r\n          if (option.required) {\r\n            const value = args.shift();\r\n            if (value === undefined) this.optionMissingArgument(option);\r\n            this.emit(`option:${option.name()}`, value);\r\n          } else if (option.optional) {\r\n            let value = null;\r\n            // historical behaviour is optional value is following arg unless an option\r\n            if (args.length > 0 && !maybeOption(args[0])) {\r\n              value = args.shift();\r\n            }\r\n            this.emit(`option:${option.name()}`, value);\r\n          } else { // boolean flag\r\n            this.emit(`option:${option.name()}`);\r\n          }\r\n          activeVariadicOption = option.variadic ? option : null;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Look for combo options following single dash, eat first one if known.\r\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\r\n        const option = this._findOption(`-${arg[1]}`);\r\n        if (option) {\r\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\r\n            // option with value following in same argument\r\n            this.emit(`option:${option.name()}`, arg.slice(2));\r\n          } else {\r\n            // boolean option, emit and put back remainder of arg for further processing\r\n            this.emit(`option:${option.name()}`);\r\n            args.unshift(`-${arg.slice(2)}`);\r\n          }\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Look for known long flag with value, like --foo=bar\r\n      if (/^--[^=]+=/.test(arg)) {\r\n        const index = arg.indexOf('=');\r\n        const option = this._findOption(arg.slice(0, index));\r\n        if (option && (option.required || option.optional)) {\r\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Not a recognised option by this command.\r\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\r\n\r\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\r\n      if (maybeOption(arg)) {\r\n        dest = unknown;\r\n      }\r\n\r\n      // If using positionalOptions, stop processing our options at subcommand.\r\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\r\n        if (this._findCommand(arg)) {\r\n          operands.push(arg);\r\n          if (args.length > 0) unknown.push(...args);\r\n          break;\r\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\r\n          operands.push(arg);\r\n          if (args.length > 0) operands.push(...args);\r\n          break;\r\n        } else if (this._defaultCommandName) {\r\n          unknown.push(arg);\r\n          if (args.length > 0) unknown.push(...args);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If using passThroughOptions, stop processing options at first command-argument.\r\n      if (this._passThroughOptions) {\r\n        dest.push(arg);\r\n        if (args.length > 0) dest.push(...args);\r\n        break;\r\n      }\r\n\r\n      // add arg\r\n      dest.push(arg);\r\n    }\r\n\r\n    return { operands, unknown };\r\n  };\r\n\r\n  /**\r\n   * Return an object containing options as key-value pairs\r\n   *\r\n   * @return {Object}\r\n   */\r\n  opts() {\r\n    if (this._storeOptionsAsProperties) {\r\n      // Preserve original behaviour so backwards compatible when still using properties\r\n      const result = {};\r\n      const len = this.options.length;\r\n\r\n      for (let i = 0; i < len; i++) {\r\n        const key = this.options[i].attributeName();\r\n        result[key] = key === this._versionOptionName ? this._version : this[key];\r\n      }\r\n      return result;\r\n    }\r\n\r\n    return this._optionValues;\r\n  };\r\n\r\n  /**\r\n   * Internal bottleneck for handling of parsing errors.\r\n   *\r\n   * @api private\r\n   */\r\n  _displayError(exitCode, code, message) {\r\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\r\n    this._exit(exitCode, code, message);\r\n  }\r\n\r\n  /**\r\n   * Argument `name` is missing.\r\n   *\r\n   * @param {string} name\r\n   * @api private\r\n   */\r\n\r\n  missingArgument(name) {\r\n    const message = `error: missing required argument '${name}'`;\r\n    this._displayError(1, 'commander.missingArgument', message);\r\n  };\r\n\r\n  /**\r\n   * `Option` is missing an argument.\r\n   *\r\n   * @param {Option} option\r\n   * @api private\r\n   */\r\n\r\n  optionMissingArgument(option) {\r\n    const message = `error: option '${option.flags}' argument missing`;\r\n    this._displayError(1, 'commander.optionMissingArgument', message);\r\n  };\r\n\r\n  /**\r\n   * `Option` does not have a value, and is a mandatory option.\r\n   *\r\n   * @param {Option} option\r\n   * @api private\r\n   */\r\n\r\n  missingMandatoryOptionValue(option) {\r\n    const message = `error: required option '${option.flags}' not specified`;\r\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\r\n  };\r\n\r\n  /**\r\n   * Unknown option `flag`.\r\n   *\r\n   * @param {string} flag\r\n   * @api private\r\n   */\r\n\r\n  unknownOption(flag) {\r\n    if (this._allowUnknownOption) return;\r\n    const message = `error: unknown option '${flag}'`;\r\n    this._displayError(1, 'commander.unknownOption', message);\r\n  };\r\n\r\n  /**\r\n   * Excess arguments, more than expected.\r\n   *\r\n   * @param {string[]} receivedArgs\r\n   * @api private\r\n   */\r\n\r\n  _excessArguments(receivedArgs) {\r\n    if (this._allowExcessArguments) return;\r\n\r\n    const expected = this._args.length;\r\n    const s = (expected === 1) ? '' : 's';\r\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\r\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\r\n    this._displayError(1, 'commander.excessArguments', message);\r\n  };\r\n\r\n  /**\r\n   * Unknown command.\r\n   *\r\n   * @api private\r\n   */\r\n\r\n  unknownCommand() {\r\n    const partCommands = [this.name()];\r\n    for (let parentCmd = this.parent; parentCmd; parentCmd = parentCmd.parent) {\r\n      partCommands.unshift(parentCmd.name());\r\n    }\r\n    const fullCommand = partCommands.join(' ');\r\n    const message = `error: unknown command '${this.args[0]}'.` +\r\n      (this._hasHelpOption ? ` See '${fullCommand} ${this._helpLongFlag}'.` : '');\r\n    this._displayError(1, 'commander.unknownCommand', message);\r\n  };\r\n\r\n  /**\r\n   * Set the program version to `str`.\r\n   *\r\n   * This method auto-registers the \"-V, --version\" flag\r\n   * which will print the version number when passed.\r\n   *\r\n   * You can optionally supply the  flags and description to override the defaults.\r\n   *\r\n   * @param {string} str\r\n   * @param {string} [flags]\r\n   * @param {string} [description]\r\n   * @return {this | string} `this` command for chaining, or version string if no arguments\r\n   */\r\n\r\n  version(str, flags, description) {\r\n    if (str === undefined) return this._version;\r\n    this._version = str;\r\n    flags = flags || '-V, --version';\r\n    description = description || 'output the version number';\r\n    const versionOption = this.createOption(flags, description);\r\n    this._versionOptionName = versionOption.attributeName();\r\n    this.options.push(versionOption);\r\n    this.on('option:' + versionOption.name(), () => {\r\n      this._outputConfiguration.writeOut(`${str}\\n`);\r\n      this._exit(0, 'commander.version', str);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set the description to `str`.\r\n   *\r\n   * @param {string} [str]\r\n   * @param {Object} [argsDescription]\r\n   * @return {string|Command}\r\n   */\r\n  description(str, argsDescription) {\r\n    if (str === undefined && argsDescription === undefined) return this._description;\r\n    this._description = str;\r\n    this._argsDescription = argsDescription;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set an alias for the command.\r\n   *\r\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\r\n   *\r\n   * @param {string} [alias]\r\n   * @return {string|Command}\r\n   */\r\n\r\n  alias(alias) {\r\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\r\n\r\n    let command = this;\r\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\r\n      // assume adding alias for last added executable subcommand, rather than this\r\n      command = this.commands[this.commands.length - 1];\r\n    }\r\n\r\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\r\n\r\n    command._aliases.push(alias);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set aliases for the command.\r\n   *\r\n   * Only the first alias is shown in the auto-generated help.\r\n   *\r\n   * @param {string[]} [aliases]\r\n   * @return {string[]|Command}\r\n   */\r\n\r\n  aliases(aliases) {\r\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\r\n    if (aliases === undefined) return this._aliases;\r\n\r\n    aliases.forEach((alias) => this.alias(alias));\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Set / get the command usage `str`.\r\n   *\r\n   * @param {string} [str]\r\n   * @return {String|Command}\r\n   */\r\n\r\n  usage(str) {\r\n    if (str === undefined) {\r\n      if (this._usage) return this._usage;\r\n\r\n      const args = this._args.map((arg) => {\r\n        return humanReadableArgName(arg);\r\n      });\r\n      return [].concat(\r\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\r\n        (this.commands.length ? '[command]' : []),\r\n        (this._args.length ? args : [])\r\n      ).join(' ');\r\n    }\r\n\r\n    this._usage = str;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Get or set the name of the command\r\n   *\r\n   * @param {string} [str]\r\n   * @return {string|Command}\r\n   */\r\n\r\n  name(str) {\r\n    if (str === undefined) return this._name;\r\n    this._name = str;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Return program help documentation.\r\n   *\r\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\r\n   * @return {string}\r\n   */\r\n\r\n  helpInformation(contextOptions) {\r\n    const helper = this.createHelp();\r\n    if (helper.helpWidth === undefined) {\r\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\r\n    }\r\n    return helper.formatHelp(this, helper);\r\n  };\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n\r\n  _getHelpContext(contextOptions) {\r\n    contextOptions = contextOptions || {};\r\n    const context = { error: !!contextOptions.error };\r\n    let write;\r\n    if (context.error) {\r\n      write = (arg) => this._outputConfiguration.writeErr(arg);\r\n    } else {\r\n      write = (arg) => this._outputConfiguration.writeOut(arg);\r\n    }\r\n    context.write = contextOptions.write || write;\r\n    context.command = this;\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * Output help information for this command.\r\n   *\r\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\r\n   *\r\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\r\n   */\r\n\r\n  outputHelp(contextOptions) {\r\n    let deprecatedCallback;\r\n    if (typeof contextOptions === 'function') {\r\n      deprecatedCallback = contextOptions;\r\n      contextOptions = undefined;\r\n    }\r\n    const context = this._getHelpContext(contextOptions);\r\n\r\n    const groupListeners = [];\r\n    let command = this;\r\n    while (command) {\r\n      groupListeners.push(command); // ordered from current command to root\r\n      command = command.parent;\r\n    }\r\n\r\n    groupListeners.slice().reverse().forEach(command => command.emit('beforeAllHelp', context));\r\n    this.emit('beforeHelp', context);\r\n\r\n    let helpInformation = this.helpInformation(context);\r\n    if (deprecatedCallback) {\r\n      helpInformation = deprecatedCallback(helpInformation);\r\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\r\n        throw new Error('outputHelp callback must return a string or a Buffer');\r\n      }\r\n    }\r\n    context.write(helpInformation);\r\n\r\n    this.emit(this._helpLongFlag); // deprecated\r\n    this.emit('afterHelp', context);\r\n    groupListeners.forEach(command => command.emit('afterAllHelp', context));\r\n  };\r\n\r\n  /**\r\n   * You can pass in flags and a description to override the help\r\n   * flags and help description for your command. Pass in false to\r\n   * disable the built-in help option.\r\n   *\r\n   * @param {string | boolean} [flags]\r\n   * @param {string} [description]\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n\r\n  helpOption(flags, description) {\r\n    if (typeof flags === 'boolean') {\r\n      this._hasHelpOption = flags;\r\n      return this;\r\n    }\r\n    this._helpFlags = flags || this._helpFlags;\r\n    this._helpDescription = description || this._helpDescription;\r\n\r\n    const helpFlags = _parseOptionFlags(this._helpFlags);\r\n    this._helpShortFlag = helpFlags.shortFlag;\r\n    this._helpLongFlag = helpFlags.longFlag;\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Output help information and exit.\r\n   *\r\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\r\n   *\r\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\r\n   */\r\n\r\n  help(contextOptions) {\r\n    this.outputHelp(contextOptions);\r\n    let exitCode = process.exitCode || 0;\r\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\r\n      exitCode = 1;\r\n    }\r\n    // message: do not have all displayed text available so only passing placeholder.\r\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\r\n  };\r\n\r\n  /**\r\n   * Add additional text to be displayed with the built-in help.\r\n   *\r\n   * Position is 'before' or 'after' to affect just this command,\r\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\r\n   *\r\n   * @param {string} position - before or after built-in help\r\n   * @param {string | Function} text - string to add, or a function returning a string\r\n   * @return {Command} `this` command for chaining\r\n   */\r\n  addHelpText(position, text) {\r\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\r\n    if (!allowedValues.includes(position)) {\r\n      throw new Error(`Unexpected value for position to addHelpText.\r\nExpecting one of '${allowedValues.join(\"', '\")}'`);\r\n    }\r\n    const helpEvent = `${position}Help`;\r\n    this.on(helpEvent, (context) => {\r\n      let helpStr;\r\n      if (typeof text === 'function') {\r\n        helpStr = text({ error: context.error, command: context.command });\r\n      } else {\r\n        helpStr = text;\r\n      }\r\n      // Ignore falsy value when nothing to output.\r\n      if (helpStr) {\r\n        context.write(`${helpStr}\\n`);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n};\r\n\r\n/**\r\n * Expose the root command.\r\n */\r\n\r\nexports = module.exports = new Command();\r\nexports.program = exports; // More explicit access to global command.\r\n\r\n/**\r\n * Expose classes\r\n */\r\n\r\nexports.Command = Command;\r\nexports.Option = Option;\r\nexports.CommanderError = CommanderError;\r\nexports.InvalidOptionArgumentError = InvalidOptionArgumentError;\r\nexports.Help = Help;\r\n\r\n/**\r\n * Camel-case the given `flag`\r\n *\r\n * @param {string} flag\r\n * @return {string}\r\n * @api private\r\n */\r\n\r\nfunction camelcase(flag) {\r\n  return flag.split('-').reduce((str, word) => {\r\n    return str + word[0].toUpperCase() + word.slice(1);\r\n  });\r\n}\r\n\r\n/**\r\n * Output help information if help flags specified\r\n *\r\n * @param {Command} cmd - command to output help for\r\n * @param {Array} args - array of options to search for help flags\r\n * @api private\r\n */\r\n\r\nfunction outputHelpIfRequested(cmd, args) {\r\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\r\n  if (helpOption) {\r\n    cmd.outputHelp();\r\n    // (Do not have all displayed text available so only passing placeholder.)\r\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\r\n  }\r\n}\r\n\r\n/**\r\n * Takes an argument and returns its human readable equivalent for help usage.\r\n *\r\n * @param {Object} arg\r\n * @return {string}\r\n * @api private\r\n */\r\n\r\nfunction humanReadableArgName(arg) {\r\n  const nameOutput = arg.name + (arg.variadic === true ? '...' : '');\r\n\r\n  return arg.required\r\n    ? '<' + nameOutput + '>'\r\n    : '[' + nameOutput + ']';\r\n}\r\n\r\n/**\r\n * Parse the short and long flag out of something like '-m,--mixed <value>'\r\n *\r\n * @api private\r\n */\r\n\r\nfunction _parseOptionFlags(flags) {\r\n  let shortFlag;\r\n  let longFlag;\r\n  // Use original very loose parsing to maintain backwards compatibility for now,\r\n  // which allowed for example unintended `-sw, --short-word` [sic].\r\n  const flagParts = flags.split(/[ |,]+/);\r\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\r\n  longFlag = flagParts.shift();\r\n  // Add support for lone short flag without significantly changing parsing!\r\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\r\n    shortFlag = longFlag;\r\n    longFlag = undefined;\r\n  }\r\n  return { shortFlag, longFlag };\r\n}\r\n\r\n/**\r\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\r\n *\r\n * @param {string[]} args - array of arguments from node.execArgv\r\n * @returns {string[]}\r\n * @api private\r\n */\r\n\r\nfunction incrementNodeInspectorPort(args) {\r\n  // Testing for these options:\r\n  //  --inspect[=[host:]port]\r\n  //  --inspect-brk[=[host:]port]\r\n  //  --inspect-port=[host:]port\r\n  return args.map((arg) => {\r\n    if (!arg.startsWith('--inspect')) {\r\n      return arg;\r\n    }\r\n    let debugOption;\r\n    let debugHost = '127.0.0.1';\r\n    let debugPort = '9229';\r\n    let match;\r\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\r\n      // e.g. --inspect\r\n      debugOption = match[1];\r\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\r\n      debugOption = match[1];\r\n      if (/^\\d+$/.test(match[3])) {\r\n        // e.g. --inspect=1234\r\n        debugPort = match[3];\r\n      } else {\r\n        // e.g. --inspect=localhost\r\n        debugHost = match[3];\r\n      }\r\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\r\n      // e.g. --inspect=localhost:1234\r\n      debugOption = match[1];\r\n      debugHost = match[3];\r\n      debugPort = match[4];\r\n    }\r\n\r\n    if (debugOption && debugPort !== '0') {\r\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\r\n    }\r\n    return arg;\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AAAA;AAIA,QAAM,eAAe,iBAAkB;AACvC,QAAM,eAAe;AACrB,QAAM,OAAO;AACb,QAAM,KAAK;AAKX,QAAM,OAAN,MAAW;AAAA,MACT,cAAc;AACZ,aAAK,YAAY;AACjB,aAAK,kBAAkB;AACvB,aAAK,cAAc;AAAA,MACrB;AAAA,MASA,gBAAgB,KAAK;AACnB,cAAM,kBAAkB,IAAI,SAAS,OAAO,CAAAA,SAAO,CAACA,KAAI,OAAO;AAC/D,YAAI,IAAI,wBAAwB,GAAG;AAEjC,gBAAM,OAAO,IAAI,wBAAwB,MAAM,IAAI;AACnD,gBAAM,cAAc,IAAI,cAAc,KAAK,MAAM,CAAC,EAC/C,WAAW,KAAK;AACnB,sBAAY,YAAY,IAAI,uBAAuB;AACnD,sBAAY,mBAAmB,IAAI;AACnC,0BAAgB,KAAK,WAAW;AAAA,QAClC;AACA,YAAI,KAAK,iBAAiB;AACxB,0BAAgB,KAAK,CAAC,GAAG,MAAM;AAC7B,mBAAO,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,CAAC;AAAA,UACxC,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT;AAAA,MASA,eAAe,KAAK;AAClB,cAAM,iBAAiB,IAAI,QAAQ,OAAO,CAAC,WAAW,CAAC,OAAO,MAAM;AAEpE,cAAM,oBAAoB,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,IAAI,YAAY,IAAI,cAAc;AACzG,cAAM,mBAAmB,IAAI,kBAAkB,CAAC,IAAI,YAAY,IAAI,aAAa;AACjF,YAAI,qBAAqB,kBAAkB;AACzC,cAAI;AACJ,cAAI,CAAC,mBAAmB;AACtB,yBAAa,IAAI,aAAa,IAAI,eAAe,IAAI,gBAAgB;AAAA,UACvE,WAAW,CAAC,kBAAkB;AAC5B,yBAAa,IAAI,aAAa,IAAI,gBAAgB,IAAI,gBAAgB;AAAA,UACxE,OAAO;AACL,yBAAa,IAAI,aAAa,IAAI,YAAY,IAAI,gBAAgB;AAAA,UACpE;AACA,yBAAe,KAAK,UAAU;AAAA,QAChC;AACA,YAAI,KAAK,aAAa;AACpB,gBAAM,aAAa,CAAC,WAAW;AAE7B,mBAAO,OAAO,QAAQ,OAAO,MAAM,QAAQ,MAAM,EAAE,IAAI,OAAO,KAAK,QAAQ,OAAO,EAAE;AAAA,UACtF;AACA,yBAAe,KAAK,CAAC,GAAG,MAAM;AAC5B,mBAAO,WAAW,CAAC,EAAE,cAAc,WAAW,CAAC,CAAC;AAAA,UAClD,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT;AAAA,MASA,iBAAiB,KAAK;AACpB,YAAI,IAAI,oBAAoB,IAAI,MAAM,QAAQ;AAC5C,iBAAO,IAAI,MAAM,IAAI,CAAC,aAAa;AACjC,mBAAO,EAAE,MAAM,SAAS,MAAM,aAAa,IAAI,iBAAiB,SAAS,SAAS,GAAG;AAAA,UACvF,GAAG,CAAC;AAAA,QACN;AACA,eAAO,CAAC;AAAA,MACV;AAAA,MASA,eAAe,KAAK;AAElB,cAAM,OAAO,IAAI,MAAM,IAAI,SAAO,qBAAqB,GAAG,CAAC,EAAE,KAAK,GAAG;AACrE,eAAO,IAAI,SACR,IAAI,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,OAC1C,IAAI,QAAQ,SAAS,eAAe,OACpC,OAAO,MAAM,OAAO;AAAA,MACzB;AAAA,MASA,WAAW,QAAQ;AACjB,eAAO,OAAO;AAAA,MAChB;AAAA,MAUA,4BAA4B,KAAK,QAAQ;AACvC,eAAO,OAAO,gBAAgB,GAAG,EAAE,OAAO,CAAC,KAAK,YAAY;AAC1D,iBAAO,KAAK,IAAI,KAAK,OAAO,eAAe,OAAO,EAAE,MAAM;AAAA,QAC5D,GAAG,CAAC;AAAA,MACN;AAAA,MAUA,wBAAwB,KAAK,QAAQ;AACnC,eAAO,OAAO,eAAe,GAAG,EAAE,OAAO,CAAC,KAAK,WAAW;AACxD,iBAAO,KAAK,IAAI,KAAK,OAAO,WAAW,MAAM,EAAE,MAAM;AAAA,QACvD,GAAG,CAAC;AAAA,MACN;AAAA,MAUA,0BAA0B,KAAK,QAAQ;AACrC,eAAO,OAAO,iBAAiB,GAAG,EAAE,OAAO,CAAC,KAAK,aAAa;AAC5D,iBAAO,KAAK,IAAI,KAAK,SAAS,KAAK,MAAM;AAAA,QAC3C,GAAG,CAAC;AAAA,MACN;AAAA,MASA,aAAa,KAAK;AAEhB,YAAI,UAAU,IAAI;AAClB,YAAI,IAAI,SAAS,IAAI;AACnB,oBAAU,UAAU,MAAM,IAAI,SAAS;AAAA,QACzC;AACA,YAAI,iBAAiB;AACrB,iBAAS,YAAY,IAAI,QAAQ,WAAW,YAAY,UAAU,QAAQ;AACxE,2BAAiB,UAAU,KAAK,IAAI,MAAM;AAAA,QAC5C;AACA,eAAO,iBAAiB,UAAU,MAAM,IAAI,MAAM;AAAA,MACpD;AAAA,MASA,mBAAmB,KAAK;AAEtB,eAAO,IAAI,YAAY;AAAA,MACzB;AAAA,MASA,sBAAsB,KAAK;AAEzB,eAAO,IAAI,YAAY;AAAA,MACzB;AAAA,MASA,kBAAkB,QAAQ;AACxB,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO;AAAA,QAChB;AACA,cAAM,YAAY,CAAC;AACnB,YAAI,OAAO,YAAY;AACrB,oBAAU;AAAA,YAER,YAAY,OAAO,WAAW,IAAI,CAAC,WAAW,KAAK,UAAU,MAAM,CAAC,EAAE,KAAK,IAAI;AAAA,UAAG;AAAA,QACtF;AACA,YAAI,OAAO,iBAAiB,QAAW;AACrC,oBAAU,KAAK,YAAY,OAAO,2BAA2B,KAAK,UAAU,OAAO,YAAY,GAAG;AAAA,QACpG;AACA,YAAI,UAAU,SAAS,GAAG;AACxB,iBAAO,GAAG,OAAO,gBAAgB,UAAU,KAAK,IAAI;AAAA,QACtD;AACA,eAAO,OAAO;AAAA,MAChB;AAAA,MAUA,WAAW,KAAK,QAAQ;AACtB,cAAM,YAAY,OAAO,SAAS,KAAK,MAAM;AAC7C,cAAM,YAAY,OAAO,aAAa;AACtC,cAAM,kBAAkB;AACxB,cAAM,qBAAqB;AAC3B,iBAAS,WAAW,MAAM,aAAa;AACrC,cAAI,aAAa;AACf,kBAAM,WAAW,GAAG,KAAK,OAAO,YAAY,kBAAkB,IAAI;AAClE,mBAAO,OAAO,KAAK,UAAU,YAAY,iBAAiB,YAAY,kBAAkB;AAAA,UAC1F;AACA,iBAAO;AAAA,QACT;AAAC;AACD,iBAAS,WAAW,WAAW;AAC7B,iBAAO,UAAU,KAAK,IAAI,EAAE,QAAQ,OAAO,IAAI,OAAO,eAAe,CAAC;AAAA,QACxE;AAGA,YAAI,SAAS,CAAC,UAAU,OAAO,aAAa,GAAG,KAAK,EAAE;AAGtD,cAAM,qBAAqB,OAAO,mBAAmB,GAAG;AACxD,YAAI,mBAAmB,SAAS,GAAG;AACjC,mBAAS,OAAO,OAAO,CAAC,oBAAoB,EAAE,CAAC;AAAA,QACjD;AAGA,cAAM,eAAe,OAAO,iBAAiB,GAAG,EAAE,IAAI,CAAC,aAAa;AAClE,iBAAO,WAAW,SAAS,MAAM,SAAS,WAAW;AAAA,QACvD,CAAC;AACD,YAAI,aAAa,SAAS,GAAG;AAC3B,mBAAS,OAAO,OAAO,CAAC,cAAc,WAAW,YAAY,GAAG,EAAE,CAAC;AAAA,QACrE;AAGA,cAAM,aAAa,OAAO,eAAe,GAAG,EAAE,IAAI,CAAC,WAAW;AAC5D,iBAAO,WAAW,OAAO,WAAW,MAAM,GAAG,OAAO,kBAAkB,MAAM,CAAC;AAAA,QAC/E,CAAC;AACD,YAAI,WAAW,SAAS,GAAG;AACzB,mBAAS,OAAO,OAAO,CAAC,YAAY,WAAW,UAAU,GAAG,EAAE,CAAC;AAAA,QACjE;AAGA,cAAM,cAAc,OAAO,gBAAgB,GAAG,EAAE,IAAI,CAACA,SAAQ;AAC3D,iBAAO,WAAW,OAAO,eAAeA,IAAG,GAAG,OAAO,sBAAsBA,IAAG,CAAC;AAAA,QACjF,CAAC;AACD,YAAI,YAAY,SAAS,GAAG;AAC1B,mBAAS,OAAO,OAAO,CAAC,aAAa,WAAW,WAAW,GAAG,EAAE,CAAC;AAAA,QACnE;AAEA,eAAO,OAAO,KAAK,IAAI;AAAA,MACzB;AAAA,MAUA,SAAS,KAAK,QAAQ;AACpB,eAAO,KAAK;AAAA,UACV,OAAO,wBAAwB,KAAK,MAAM;AAAA,UAC1C,OAAO,4BAA4B,KAAK,MAAM;AAAA,UAC9C,OAAO,0BAA0B,KAAK,MAAM;AAAA,QAC9C;AAAA,MACF;AAAA,MAcA,KAAK,KAAK,OAAO,QAAQ,iBAAiB,IAAI;AAG5C,YAAI,IAAI,MAAM,SAAS;AAAG,iBAAO;AAEjC,cAAM,cAAc,QAAQ;AAC5B,YAAI,cAAc;AAAgB,iBAAO;AAEzC,cAAM,aAAa,IAAI,OAAO,GAAG,MAAM;AACvC,cAAM,aAAa,IAAI,OAAO,MAAM;AAEpC,cAAM,eAAe,IAAI,OAAO,MAAM;AACtC,cAAM,QAAQ,IAAI,OAAO,UAAU,cAAc,KAAK,kDAAkD,GAAG;AAC3G,cAAM,QAAQ,WAAW,MAAM,KAAK,KAAK,CAAC;AAC1C,eAAO,aAAa,MAAM,IAAI,CAAC,MAAM,MAAM;AACzC,cAAI,KAAK,MAAM,EAAE,MAAM,MAAM;AAC3B,mBAAO,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA,UACtC;AACA,kBAAS,IAAI,IAAK,eAAe,MAAM,KAAK,UAAU;AAAA,QACxD,CAAC,EAAE,KAAK,IAAI;AAAA,MACd;AAAA,IACF;AAEA,QAAM,SAAN,MAAa;AAAA,MAQX,YAAY,OAAO,aAAa;AAC9B,aAAK,QAAQ;AACb,aAAK,cAAc,eAAe;AAElC,aAAK,WAAW,MAAM,SAAS,GAAG;AAClC,aAAK,WAAW,MAAM,SAAS,GAAG;AAElC,aAAK,WAAW,iBAAiB,KAAK,KAAK;AAC3C,aAAK,YAAY;AACjB,cAAM,cAAc,kBAAkB,KAAK;AAC3C,aAAK,QAAQ,YAAY;AACzB,aAAK,OAAO,YAAY;AACxB,aAAK,SAAS;AACd,YAAI,KAAK,MAAM;AACb,eAAK,SAAS,KAAK,KAAK,WAAW,OAAO;AAAA,QAC5C;AACA,aAAK,eAAe;AACpB,aAAK,0BAA0B;AAC/B,aAAK,WAAW;AAChB,aAAK,SAAS;AACd,aAAK,aAAa;AAAA,MACpB;AAAA,MAUA,QAAQ,OAAO,aAAa;AAC1B,aAAK,eAAe;AACpB,aAAK,0BAA0B;AAC/B,eAAO;AAAA,MACT;AAAA,MASA,UAAU,IAAI;AACZ,aAAK,WAAW;AAChB,eAAO;AAAA,MACT;AAAA,MASA,oBAAoB,YAAY,MAAM;AACpC,aAAK,YAAY,CAAC,CAAC;AACnB,eAAO;AAAA,MACT;AAAA,MASA,SAAS,OAAO,MAAM;AACpB,aAAK,SAAS,CAAC,CAAC;AAChB,eAAO;AAAA,MACT;AAAA,MAMA,aAAa,OAAO,UAAU;AAC5B,YAAI,aAAa,KAAK,gBAAgB,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC9D,iBAAO,CAAC,KAAK;AAAA,QACf;AAEA,eAAO,SAAS,OAAO,KAAK;AAAA,MAC9B;AAAA,MASA,QAAQ,QAAQ;AACd,aAAK,aAAa;AAClB,aAAK,WAAW,CAAC,KAAK,aAAa;AACjC,cAAI,CAAC,OAAO,SAAS,GAAG,GAAG;AACzB,kBAAM,IAAI,2BAA2B,uBAAuB,OAAO,KAAK,IAAI,IAAI;AAAA,UAClF;AACA,cAAI,KAAK,UAAU;AACjB,mBAAO,KAAK,aAAa,KAAK,QAAQ;AAAA,UACxC;AACA,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MAQA,OAAO;AACL,YAAI,KAAK,MAAM;AACb,iBAAO,KAAK,KAAK,QAAQ,OAAO,EAAE;AAAA,QACpC;AACA,eAAO,KAAK,MAAM,QAAQ,MAAM,EAAE;AAAA,MACpC;AAAA,MAUA,gBAAgB;AACd,eAAO,UAAU,KAAK,KAAK,EAAE,QAAQ,QAAQ,EAAE,CAAC;AAAA,MAClD;AAAA,MAUA,GAAG,KAAK;AACN,eAAO,KAAK,UAAU,OAAO,KAAK,SAAS;AAAA,MAC7C;AAAA,IACF;AAMA,QAAM,iBAAN,cAA6B,MAAM;AAAA,MAQjC,YAAY,UAAU,MAAM,SAAS;AACnC,cAAM,OAAO;AAEb,cAAM,kBAAkB,MAAM,KAAK,WAAW;AAC9C,aAAK,OAAO,KAAK,YAAY;AAC7B,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAMA,QAAM,6BAAN,cAAyC,eAAe;AAAA,MAMtD,YAAY,SAAS;AACnB,cAAM,GAAG,mCAAmC,OAAO;AAEnD,cAAM,kBAAkB,MAAM,KAAK,WAAW;AAC9C,aAAK,OAAO,KAAK,YAAY;AAAA,MAC/B;AAAA,IACF;AAEA,QAAM,UAAN,cAAsB,aAAa;AAAA,MAOjC,YAAY,MAAM;AAChB,cAAM;AACN,aAAK,WAAW,CAAC;AACjB,aAAK,UAAU,CAAC;AAChB,aAAK,SAAS;AACd,aAAK,sBAAsB;AAC3B,aAAK,wBAAwB;AAC7B,aAAK,QAAQ,CAAC;AACd,aAAK,UAAU;AACf,aAAK,cAAc;AACnB,aAAK,QAAQ,QAAQ;AACrB,aAAK,gBAAgB,CAAC;AACtB,aAAK,4BAA4B;AACjC,aAAK,iBAAiB,CAAC;AACvB,aAAK,iBAAiB;AACtB,aAAK,qBAAqB;AAC1B,aAAK,kBAAkB;AACvB,aAAK,sBAAsB;AAC3B,aAAK,gBAAgB;AACrB,aAAK,WAAW,CAAC;AACjB,aAAK,+BAA+B;AACpC,aAAK,eAAe;AACpB,aAAK,mBAAmB;AACxB,aAAK,2BAA2B;AAChC,aAAK,sBAAsB;AAG3B,aAAK,uBAAuB;AAAA,UAC1B,UAAU,CAAC,QAAQ,QAAQ,OAAO,MAAM,GAAG;AAAA,UAC3C,UAAU,CAAC,QAAQ,QAAQ,OAAO,MAAM,GAAG;AAAA,UAC3C,iBAAiB,MAAM,QAAQ,OAAO,QAAQ,QAAQ,OAAO,UAAU;AAAA,UACvE,iBAAiB,MAAM,QAAQ,OAAO,QAAQ,QAAQ,OAAO,UAAU;AAAA,UACvE,aAAa,CAAC,KAAK,UAAU,MAAM,GAAG;AAAA,QACxC;AAEA,aAAK,UAAU;AACf,aAAK,iBAAiB;AACtB,aAAK,aAAa;AAClB,aAAK,mBAAmB;AACxB,aAAK,iBAAiB;AACtB,aAAK,gBAAgB;AACrB,aAAK,0BAA0B;AAC/B,aAAK,mBAAmB;AACxB,aAAK,0BAA0B;AAC/B,aAAK,0BAA0B;AAC/B,aAAK,qBAAqB,CAAC;AAAA,MAC7B;AAAA,MA4BA,QAAQ,aAAa,sBAAsB,UAAU;AACnD,YAAI,OAAO;AACX,YAAI,OAAO;AACX,YAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC7C,iBAAO;AACP,iBAAO;AAAA,QACT;AACA,eAAO,QAAQ,CAAC;AAChB,cAAM,OAAO,YAAY,MAAM,IAAI;AACnC,cAAM,MAAM,KAAK,cAAc,KAAK,MAAM,CAAC;AAE3C,YAAI,MAAM;AACR,cAAI,YAAY,IAAI;AACpB,cAAI,qBAAqB;AAAA,QAC3B;AACA,YAAI,KAAK;AAAW,eAAK,sBAAsB,IAAI;AAEnD,YAAI,uBAAuB,KAAK;AAEhC,YAAI,UAAU,CAAC,EAAE,KAAK,UAAU,KAAK;AACrC,YAAI,iBAAiB,KAAK;AAC1B,YAAI,aAAa,KAAK;AACtB,YAAI,mBAAmB,KAAK;AAC5B,YAAI,iBAAiB,KAAK;AAC1B,YAAI,gBAAgB,KAAK;AACzB,YAAI,mBAAmB,KAAK;AAC5B,YAAI,0BAA0B,KAAK;AACnC,YAAI,0BAA0B,KAAK;AACnC,YAAI,qBAAqB,KAAK;AAC9B,YAAI,gBAAgB,KAAK;AACzB,YAAI,4BAA4B,KAAK;AACrC,YAAI,+BAA+B,KAAK;AACxC,YAAI,wBAAwB,KAAK;AACjC,YAAI,2BAA2B,KAAK;AAEpC,YAAI,kBAAkB,KAAK,kBAAkB;AAC7C,aAAK,SAAS,KAAK,GAAG;AACtB,YAAI,mBAAmB,IAAI;AAC3B,YAAI,SAAS;AAEb,YAAI;AAAM,iBAAO;AACjB,eAAO;AAAA,MACT;AAAA,MAYA,cAAc,MAAM;AAClB,eAAO,IAAI,QAAQ,IAAI;AAAA,MACzB;AAAA,MASA,aAAa;AACX,eAAO,OAAO,OAAO,IAAI,KAAK,GAAG,KAAK,cAAc,CAAC;AAAA,MACvD;AAAA,MAUA,cAAc,eAAe;AAC3B,YAAI,kBAAkB;AAAW,iBAAO,KAAK;AAE7C,aAAK,qBAAqB;AAC1B,eAAO;AAAA,MACT;AAAA,MAqBA,gBAAgB,eAAe;AAC7B,YAAI,kBAAkB;AAAW,iBAAO,KAAK;AAE7C,eAAO,OAAO,KAAK,sBAAsB,aAAa;AACtD,eAAO;AAAA,MACT;AAAA,MAYA,WAAW,KAAK,MAAM;AACpB,YAAI,CAAC,IAAI;AAAO,gBAAM,IAAI,MAAM,kDAAkD;AAIlF,iBAAS,mBAAmB,cAAc;AACxC,uBAAa,QAAQ,CAACA,SAAQ;AAC5B,gBAAIA,KAAI,sBAAsB,CAACA,KAAI,iBAAiB;AAClD,oBAAM,IAAI,MAAM,6DAA6DA,KAAI,KAAK,GAAG;AAAA,YAC3F;AACA,+BAAmBA,KAAI,QAAQ;AAAA,UACjC,CAAC;AAAA,QACH;AACA,2BAAmB,IAAI,QAAQ;AAE/B,eAAO,QAAQ,CAAC;AAChB,YAAI,KAAK;AAAW,eAAK,sBAAsB,IAAI;AACnD,YAAI,KAAK,UAAU,KAAK;AAAQ,cAAI,UAAU;AAE9C,aAAK,SAAS,KAAK,GAAG;AACtB,YAAI,SAAS;AACb,eAAO;AAAA,MACT;AAAA,MAMA,UAAU,MAAM;AACd,eAAO,KAAK,mBAAmB,KAAK,MAAM,IAAI,CAAC;AAAA,MACjD;AAAA,MAYA,eAAe,qBAAqB,aAAa;AAC/C,YAAI,wBAAwB,OAAO;AACjC,eAAK,0BAA0B;AAAA,QACjC,OAAO;AACL,eAAK,0BAA0B;AAC/B,cAAI,OAAO,wBAAwB,UAAU;AAC3C,iBAAK,mBAAmB,oBAAoB,MAAM,GAAG,EAAE;AACvD,iBAAK,0BAA0B;AAAA,UACjC;AACA,eAAK,0BAA0B,eAAe,KAAK;AAAA,QACrD;AACA,eAAO;AAAA,MACT;AAAA,MAOA,0BAA0B;AACxB,YAAI,KAAK,4BAA4B,QAAW;AAC9C,iBAAO,KAAK,SAAS,UAAU,CAAC,KAAK,kBAAkB,CAAC,KAAK,aAAa,MAAM;AAAA,QAClF;AACA,eAAO,KAAK;AAAA,MACd;AAAA,MAYA,mBAAmB,MAAM;AACvB,YAAI,CAAC,KAAK;AAAQ;AAClB,aAAK,QAAQ,CAAC,QAAQ;AACpB,gBAAM,aAAa;AAAA,YACjB,UAAU;AAAA,YACV,MAAM;AAAA,YACN,UAAU;AAAA,UACZ;AAEA,kBAAQ,IAAI,IAAI;AAAA,YACd,KAAK;AACH,yBAAW,WAAW;AACtB,yBAAW,OAAO,IAAI,MAAM,GAAG,EAAE;AACjC;AAAA,YACF,KAAK;AACH,yBAAW,OAAO,IAAI,MAAM,GAAG,EAAE;AACjC;AAAA,UACJ;AAEA,cAAI,WAAW,KAAK,SAAS,KAAK,WAAW,KAAK,MAAM,EAAE,MAAM,OAAO;AACrE,uBAAW,WAAW;AACtB,uBAAW,OAAO,WAAW,KAAK,MAAM,GAAG,EAAE;AAAA,UAC/C;AACA,cAAI,WAAW,MAAM;AACnB,iBAAK,MAAM,KAAK,UAAU;AAAA,UAC5B;AAAA,QACF,CAAC;AACD,aAAK,MAAM,QAAQ,CAAC,KAAK,MAAM;AAC7B,cAAI,IAAI,YAAY,IAAI,KAAK,MAAM,SAAS,GAAG;AAC7C,kBAAM,IAAI,MAAM,2CAA2C,IAAI,OAAO;AAAA,UACxE;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT;AAAA,MASA,aAAa,IAAI;AACf,YAAI,IAAI;AACN,eAAK,gBAAgB;AAAA,QACvB,OAAO;AACL,eAAK,gBAAgB,CAAC,QAAQ;AAC5B,gBAAI,IAAI,SAAS,oCAAoC;AACnD,oBAAM;AAAA,YACR,OAAO;AAAA,YAEP;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,MAYA,MAAM,UAAU,MAAM,SAAS;AAC7B,YAAI,KAAK,eAAe;AACtB,eAAK,cAAc,IAAI,eAAe,UAAU,MAAM,OAAO,CAAC;AAAA,QAEhE;AACA,gBAAQ,KAAK,QAAQ;AAAA,MACvB;AAAA,MAkBA,OAAO,IAAI;AACT,cAAM,WAAW,CAAC,SAAS;AAEzB,gBAAM,oBAAoB,KAAK,MAAM;AACrC,gBAAM,aAAa,KAAK,MAAM,GAAG,iBAAiB;AAClD,cAAI,KAAK,2BAA2B;AAClC,uBAAW,qBAAqB;AAAA,UAClC,OAAO;AACL,uBAAW,qBAAqB,KAAK,KAAK;AAAA,UAC5C;AACA,qBAAW,KAAK,IAAI;AAEpB,gBAAM,eAAe,GAAG,MAAM,MAAM,UAAU;AAE9C,cAAI,cAAc;AAClB,iBAAO,YAAY,QAAQ;AACzB,0BAAc,YAAY;AAAA,UAC5B;AACA,sBAAY,eAAe,KAAK,YAAY;AAAA,QAC9C;AACA,aAAK,iBAAiB;AACtB,eAAO;AAAA,MACT;AAAA,MAaA,aAAa,OAAO,aAAa;AAC/B,eAAO,IAAI,OAAO,OAAO,WAAW;AAAA,MACtC;AAAA,MAQA,UAAU,QAAQ;AAChB,cAAM,QAAQ,OAAO,KAAK;AAC1B,cAAM,OAAO,OAAO,cAAc;AAElC,YAAI,eAAe,OAAO;AAG1B,YAAI,OAAO,UAAU,OAAO,YAAY,OAAO,YAAY,OAAO,iBAAiB,WAAW;AAE5F,cAAI,OAAO,QAAQ;AACjB,kBAAM,mBAAmB,OAAO,KAAK,QAAQ,UAAU,IAAI;AAC3D,2BAAe,KAAK,YAAY,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,IAAI;AAAA,UACnF;AAEA,cAAI,iBAAiB,QAAW;AAC9B,iBAAK,gBAAgB,MAAM,YAAY;AAAA,UACzC;AAAA,QACF;AAGA,aAAK,QAAQ,KAAK,MAAM;AAIxB,aAAK,GAAG,YAAY,OAAO,CAAC,QAAQ;AAClC,gBAAM,WAAW,KAAK,gBAAgB,IAAI;AAG1C,cAAI,QAAQ,QAAQ,OAAO,UAAU;AACnC,gBAAI;AACF,oBAAM,OAAO,SAAS,KAAK,aAAa,SAAY,eAAe,QAAQ;AAAA,YAC7E,SAAS,KAAP;AACA,kBAAI,IAAI,SAAS,mCAAmC;AAClD,sBAAM,UAAU,kBAAkB,OAAO,oBAAoB,oBAAoB,IAAI;AACrF,qBAAK,cAAc,IAAI,UAAU,IAAI,MAAM,OAAO;AAAA,cACpD;AACA,oBAAM;AAAA,YACR;AAAA,UACF,WAAW,QAAQ,QAAQ,OAAO,UAAU;AAC1C,kBAAM,OAAO,aAAa,KAAK,QAAQ;AAAA,UACzC;AAGA,cAAI,OAAO,aAAa,aAAa,OAAO,aAAa,aAAa;AAEpE,gBAAI,OAAO,MAAM;AACf,mBAAK,gBAAgB,MAAM,OAAO,SAC9B,QACA,gBAAgB,IAAI;AAAA,YAC1B,OAAO;AACL,mBAAK,gBAAgB,MAAM,GAAG;AAAA,YAChC;AAAA,UACF,WAAW,QAAQ,MAAM;AAEvB,iBAAK,gBAAgB,MAAM,OAAO,SAAS,QAAQ,GAAG;AAAA,UACxD;AAAA,QACF,CAAC;AAED,eAAO;AAAA,MACT;AAAA,MAOA,UAAU,QAAQ,OAAO,aAAa,IAAI,cAAc;AACtD,cAAM,SAAS,KAAK,aAAa,OAAO,WAAW;AACnD,eAAO,oBAAoB,CAAC,CAAC,OAAO,SAAS;AAC7C,YAAI,OAAO,OAAO,YAAY;AAC5B,iBAAO,QAAQ,YAAY,EAAE,UAAU,EAAE;AAAA,QAC3C,WAAW,cAAc,QAAQ;AAE/B,gBAAM,QAAQ;AACd,eAAK,CAAC,KAAK,QAAQ;AACjB,kBAAM,IAAI,MAAM,KAAK,GAAG;AACxB,mBAAO,IAAI,EAAE,KAAK;AAAA,UACpB;AACA,iBAAO,QAAQ,YAAY,EAAE,UAAU,EAAE;AAAA,QAC3C,OAAO;AACL,iBAAO,QAAQ,EAAE;AAAA,QACnB;AAEA,eAAO,KAAK,UAAU,MAAM;AAAA,MAC9B;AAAA,MAqDA,OAAO,OAAO,aAAa,IAAI,cAAc;AAC3C,eAAO,KAAK,UAAU,CAAC,GAAG,OAAO,aAAa,IAAI,YAAY;AAAA,MAChE;AAAA,MAeA,eAAe,OAAO,aAAa,IAAI,cAAc;AACnD,eAAO,KAAK,UAAU,EAAE,WAAW,KAAK,GAAG,OAAO,aAAa,IAAI,YAAY;AAAA,MACjF;AAAA,MAaA,4BAA4B,UAAU,MAAM;AAC1C,aAAK,+BAA+B,CAAC,CAAC;AACtC,eAAO;AAAA,MACT;AAAA,MAQA,mBAAmB,eAAe,MAAM;AACtC,aAAK,sBAAsB,CAAC,CAAC;AAC7B,eAAO;AAAA,MACT;AAAA,MAQA,qBAAqB,cAAc,MAAM;AACvC,aAAK,wBAAwB,CAAC,CAAC;AAC/B,eAAO;AAAA,MACT;AAAA,MASA,wBAAwB,aAAa,MAAM;AACzC,aAAK,2BAA2B,CAAC,CAAC;AAClC,eAAO;AAAA,MACT;AAAA,MAWA,mBAAmB,cAAc,MAAM;AACrC,aAAK,sBAAsB,CAAC,CAAC;AAC7B,YAAI,CAAC,CAAC,KAAK,UAAU,eAAe,CAAC,KAAK,OAAO,0BAA0B;AACzE,gBAAM,IAAI,MAAM,qGAAqG;AAAA,QACvH;AACA,eAAO;AAAA,MACT;AAAA,MAUA,yBAAyB,oBAAoB,MAAM;AACjD,aAAK,4BAA4B,CAAC,CAAC;AACnC,YAAI,KAAK,QAAQ,QAAQ;AACvB,gBAAM,IAAI,MAAM,wDAAwD;AAAA,QAC1E;AACA,eAAO;AAAA,MACT;AAAA,MAUA,gBAAgB,KAAK,OAAO;AAC1B,YAAI,KAAK,2BAA2B;AAClC,eAAK,OAAO;AAAA,QACd,OAAO;AACL,eAAK,cAAc,OAAO;AAAA,QAC5B;AAAA,MACF;AAAA,MAUA,gBAAgB,KAAK;AACnB,YAAI,KAAK,2BAA2B;AAClC,iBAAO,KAAK;AAAA,QACd;AACA,eAAO,KAAK,cAAc;AAAA,MAC5B;AAAA,MAoBA,MAAM,MAAM,cAAc;AACxB,YAAI,SAAS,UAAa,CAAC,MAAM,QAAQ,IAAI,GAAG;AAC9C,gBAAM,IAAI,MAAM,qDAAqD;AAAA,QACvE;AACA,uBAAe,gBAAgB,CAAC;AAGhC,YAAI,SAAS,QAAW;AACtB,iBAAO,QAAQ;AAEf,cAAI,QAAQ,YAAY,QAAQ,SAAS,UAAU;AACjD,yBAAa,OAAO;AAAA,UACtB;AAAA,QACF;AACA,aAAK,UAAU,KAAK,MAAM;AAG1B,YAAI;AACJ,gBAAQ,aAAa,MAAM;AAAA,UACzB,KAAK;AAAA,UACL,KAAK;AACH,iBAAK,cAAc,KAAK;AACxB,uBAAW,KAAK,MAAM,CAAC;AACvB;AAAA,UACF,KAAK;AAEH,gBAAI,QAAQ,YAAY;AACtB,mBAAK,cAAc,KAAK;AACxB,yBAAW,KAAK,MAAM,CAAC;AAAA,YACzB,OAAO;AACL,yBAAW,KAAK,MAAM,CAAC;AAAA,YACzB;AACA;AAAA,UACF,KAAK;AACH,uBAAW,KAAK,MAAM,CAAC;AACvB;AAAA,UACF;AACE,kBAAM,IAAI,MAAM,oCAAoC,aAAa,SAAS;AAAA,QAC9E;AACA,YAAI,CAAC,KAAK,eAAe,UAAQ,MAAM;AACrC,eAAK,cAAc,UAAQ,KAAK;AAAA,QAClC;AAGA,aAAK,QAAQ,KAAK,SAAU,KAAK,eAAe,KAAK,SAAS,KAAK,aAAa,KAAK,QAAQ,KAAK,WAAW,CAAC;AAG9G,aAAK,cAAc,CAAC,GAAG,QAAQ;AAE/B,eAAO;AAAA,MACT;AAAA,MAsBA,WAAW,MAAM,cAAc;AAC7B,aAAK,MAAM,MAAM,YAAY;AAC7B,eAAO,QAAQ,IAAI,KAAK,cAAc,EAAE,KAAK,MAAM,IAAI;AAAA,MACzD;AAAA,MAQA,mBAAmB,YAAY,MAAM;AACnC,eAAO,KAAK,MAAM;AAClB,YAAI,iBAAiB;AACrB,cAAM,YAAY,CAAC,OAAO,OAAO,QAAQ,QAAQ,MAAM;AAGvD,aAAK,iCAAiC;AAGtC,YAAI,aAAa,KAAK;AAEtB,YAAI,CAAC,cAAc,UAAQ,MAAM;AAC/B,uBAAa,UAAQ,KAAK;AAAA,QAC5B;AAEA,YAAI;AACJ,YAAI;AACF,gBAAM,eAAe,GAAG,aAAa,UAAU;AAC/C,oBAAU,KAAK,QAAQ,YAAY;AAAA,QACrC,SAAS,GAAP;AACA,oBAAU;AAAA,QACZ;AAGA,YAAI,MAAM,KAAK,SAAS,YAAY,KAAK,QAAQ,UAAU,CAAC,IAAI,MAAM,WAAW;AACjF,YAAI,WAAW,iBAAiB;AAC9B,gBAAM,WAAW;AAAA,QACnB;AAEA,cAAM,WAAW,KAAK,KAAK,SAAS,GAAG;AACvC,YAAI,GAAG,WAAW,QAAQ,GAAG;AAE3B,gBAAM;AAAA,QACR,OAAO;AAEL,oBAAU,QAAQ,CAAC,QAAQ;AACzB,gBAAI,GAAG,WAAW,GAAG,WAAW,KAAK,GAAG;AACtC,oBAAM,GAAG,WAAW;AAAA,YACtB;AAAA,UACF,CAAC;AAAA,QACH;AACA,yBAAiB,UAAU,SAAS,KAAK,QAAQ,GAAG,CAAC;AAErD,YAAI;AACJ,YAAI,QAAQ,aAAa,SAAS;AAChC,cAAI,gBAAgB;AAClB,iBAAK,QAAQ,GAAG;AAEhB,mBAAO,2BAA2B,QAAQ,QAAQ,EAAE,OAAO,IAAI;AAE/D,mBAAO,aAAa,MAAM,QAAQ,KAAK,IAAI,MAAM,EAAE,OAAO,UAAU,CAAC;AAAA,UACvE,OAAO;AACL,mBAAO,aAAa,MAAM,KAAK,MAAM,EAAE,OAAO,UAAU,CAAC;AAAA,UAC3D;AAAA,QACF,OAAO;AACL,eAAK,QAAQ,GAAG;AAEhB,iBAAO,2BAA2B,QAAQ,QAAQ,EAAE,OAAO,IAAI;AAC/D,iBAAO,aAAa,MAAM,QAAQ,UAAU,MAAM,EAAE,OAAO,UAAU,CAAC;AAAA,QACxE;AAEA,cAAM,UAAU,CAAC,WAAW,WAAW,WAAW,UAAU,QAAQ;AACpE,gBAAQ,QAAQ,CAAC,WAAW;AAE1B,kBAAQ,GAAG,QAAQ,MAAM;AACvB,gBAAI,KAAK,WAAW,SAAS,KAAK,aAAa,MAAM;AACnD,mBAAK,KAAK,MAAM;AAAA,YAClB;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAID,cAAM,eAAe,KAAK;AAC1B,YAAI,CAAC,cAAc;AACjB,eAAK,GAAG,SAAS,QAAQ,KAAK,KAAK,OAAO,CAAC;AAAA,QAC7C,OAAO;AACL,eAAK,GAAG,SAAS,MAAM;AACrB,yBAAa,IAAI,eAAe,QAAQ,YAAY,GAAG,oCAAoC,SAAS,CAAC;AAAA,UACvG,CAAC;AAAA,QACH;AACA,aAAK,GAAG,SAAS,CAAC,QAAQ;AAExB,cAAI,IAAI,SAAS,UAAU;AACzB,kBAAM,oBAAoB,IAAI;AAAA,SAC7B,WAAW;AAAA;AAEZ,kBAAM,IAAI,MAAM,iBAAiB;AAAA,UAEnC,WAAW,IAAI,SAAS,UAAU;AAChC,kBAAM,IAAI,MAAM,IAAI,qBAAqB;AAAA,UAC3C;AACA,cAAI,CAAC,cAAc;AACjB,oBAAQ,KAAK,CAAC;AAAA,UAChB,OAAO;AACL,kBAAM,eAAe,IAAI,eAAe,GAAG,oCAAoC,SAAS;AACxF,yBAAa,cAAc;AAC3B,yBAAa,YAAY;AAAA,UAC3B;AAAA,QACF,CAAC;AAGD,aAAK,iBAAiB;AAAA,MACxB;AAAA,MAKA,oBAAoB,aAAa,UAAU,SAAS;AAClD,cAAM,aAAa,KAAK,aAAa,WAAW;AAChD,YAAI,CAAC;AAAY,eAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AAE1C,YAAI,WAAW,oBAAoB;AACjC,eAAK,mBAAmB,YAAY,SAAS,OAAO,OAAO,CAAC;AAAA,QAC9D,OAAO;AACL,qBAAW,cAAc,UAAU,OAAO;AAAA,QAC5C;AAAA,MACF;AAAA,MAQA,cAAc,UAAU,SAAS;AAC/B,cAAM,SAAS,KAAK,aAAa,OAAO;AACxC,mBAAW,SAAS,OAAO,OAAO,QAAQ;AAC1C,kBAAU,OAAO;AACjB,aAAK,OAAO,SAAS,OAAO,OAAO;AAEnC,YAAI,YAAY,KAAK,aAAa,SAAS,EAAE,GAAG;AAC9C,eAAK,oBAAoB,SAAS,IAAI,SAAS,MAAM,CAAC,GAAG,OAAO;AAAA,QAClE,WAAW,KAAK,wBAAwB,KAAK,SAAS,OAAO,KAAK,kBAAkB;AAClF,cAAI,SAAS,WAAW,GAAG;AACzB,iBAAK,KAAK;AAAA,UACZ,OAAO;AACL,iBAAK,oBAAoB,SAAS,IAAI,CAAC,GAAG,CAAC,KAAK,aAAa,CAAC;AAAA,UAChE;AAAA,QACF,WAAW,KAAK,qBAAqB;AACnC,gCAAsB,MAAM,OAAO;AACnC,eAAK,oBAAoB,KAAK,qBAAqB,UAAU,OAAO;AAAA,QACtE,OAAO;AACL,cAAI,KAAK,SAAS,UAAU,KAAK,KAAK,WAAW,KAAK,CAAC,KAAK,kBAAkB,CAAC,KAAK,qBAAqB;AAEvG,iBAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,UAC3B;AAEA,gCAAsB,MAAM,OAAO,OAAO;AAC1C,eAAK,iCAAiC;AAGtC,gBAAM,yBAAyB,MAAM;AACnC,gBAAI,OAAO,QAAQ,SAAS,GAAG;AAC7B,mBAAK,cAAc,OAAO,QAAQ,EAAE;AAAA,YACtC;AAAA,UACF;AAEA,gBAAM,eAAe,WAAW,KAAK,KAAK;AAC1C,cAAI,KAAK,gBAAgB;AACvB,mCAAuB;AAEvB,kBAAM,OAAO,KAAK,KAAK,MAAM;AAC7B,iBAAK,MAAM,QAAQ,CAAC,KAAK,MAAM;AAC7B,kBAAI,IAAI,YAAY,KAAK,MAAM,MAAM;AACnC,qBAAK,gBAAgB,IAAI,IAAI;AAAA,cAC/B,WAAW,IAAI,UAAU;AACvB,qBAAK,KAAK,KAAK,OAAO,CAAC;AACvB,qBAAK,SAAS,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM;AAAA,cAC3C;AAAA,YACF,CAAC;AACD,gBAAI,KAAK,SAAS,KAAK,MAAM,QAAQ;AACnC,mBAAK,iBAAiB,IAAI;AAAA,YAC5B;AAEA,iBAAK,eAAe,IAAI;AACxB,gBAAI,KAAK;AAAQ,mBAAK,OAAO,KAAK,cAAc,UAAU,OAAO;AAAA,UACnE,WAAW,KAAK,UAAU,KAAK,OAAO,cAAc,YAAY,GAAG;AACjE,mCAAuB;AACvB,iBAAK,OAAO,KAAK,cAAc,UAAU,OAAO;AAAA,UAClD,WAAW,SAAS,QAAQ;AAC1B,gBAAI,KAAK,aAAa,GAAG,GAAG;AAC1B,mBAAK,oBAAoB,KAAK,UAAU,OAAO;AAAA,YACjD,WAAW,KAAK,cAAc,WAAW,GAAG;AAE1C,mBAAK,KAAK,aAAa,UAAU,OAAO;AAAA,YAC1C,WAAW,KAAK,SAAS,QAAQ;AAC/B,mBAAK,eAAe;AAAA,YACtB,OAAO;AACL,qCAAuB;AAAA,YACzB;AAAA,UACF,WAAW,KAAK,SAAS,QAAQ;AAE/B,iBAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,UAC3B,OAAO;AACL,mCAAuB;AAAA,UAEzB;AAAA,QACF;AAAA,MACF;AAAA,MAOA,aAAa,MAAM;AACjB,YAAI,CAAC;AAAM,iBAAO;AAClB,eAAO,KAAK,SAAS,KAAK,SAAO,IAAI,UAAU,QAAQ,IAAI,SAAS,SAAS,IAAI,CAAC;AAAA,MACpF;AAAA,MAUA,YAAY,KAAK;AACf,eAAO,KAAK,QAAQ,KAAK,YAAU,OAAO,GAAG,GAAG,CAAC;AAAA,MACnD;AAAA,MASA,mCAAmC;AAEjC,iBAAS,MAAM,MAAM,KAAK,MAAM,IAAI,QAAQ;AAC1C,cAAI,QAAQ,QAAQ,CAAC,aAAa;AAChC,gBAAI,SAAS,aAAc,IAAI,gBAAgB,SAAS,cAAc,CAAC,MAAM,QAAY;AACvF,kBAAI,4BAA4B,QAAQ;AAAA,YAC1C;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MAkBA,aAAa,MAAM;AACjB,cAAM,WAAW,CAAC;AAClB,cAAM,UAAU,CAAC;AACjB,YAAI,OAAO;AACX,cAAM,OAAO,KAAK,MAAM;AAExB,iBAAS,YAAY,KAAK;AACxB,iBAAO,IAAI,SAAS,KAAK,IAAI,OAAO;AAAA,QACtC;AAGA,YAAI,uBAAuB;AAC3B,eAAO,KAAK,QAAQ;AAClB,gBAAM,MAAM,KAAK,MAAM;AAGvB,cAAI,QAAQ,MAAM;AAChB,gBAAI,SAAS;AAAS,mBAAK,KAAK,GAAG;AACnC,iBAAK,KAAK,GAAG,IAAI;AACjB;AAAA,UACF;AAEA,cAAI,wBAAwB,CAAC,YAAY,GAAG,GAAG;AAC7C,iBAAK,KAAK,UAAU,qBAAqB,KAAK,KAAK,GAAG;AACtD;AAAA,UACF;AACA,iCAAuB;AAEvB,cAAI,YAAY,GAAG,GAAG;AACpB,kBAAM,SAAS,KAAK,YAAY,GAAG;AAEnC,gBAAI,QAAQ;AACV,kBAAI,OAAO,UAAU;AACnB,sBAAM,QAAQ,KAAK,MAAM;AACzB,oBAAI,UAAU;AAAW,uBAAK,sBAAsB,MAAM;AAC1D,qBAAK,KAAK,UAAU,OAAO,KAAK,KAAK,KAAK;AAAA,cAC5C,WAAW,OAAO,UAAU;AAC1B,oBAAI,QAAQ;AAEZ,oBAAI,KAAK,SAAS,KAAK,CAAC,YAAY,KAAK,EAAE,GAAG;AAC5C,0BAAQ,KAAK,MAAM;AAAA,gBACrB;AACA,qBAAK,KAAK,UAAU,OAAO,KAAK,KAAK,KAAK;AAAA,cAC5C,OAAO;AACL,qBAAK,KAAK,UAAU,OAAO,KAAK,GAAG;AAAA,cACrC;AACA,qCAAuB,OAAO,WAAW,SAAS;AAClD;AAAA,YACF;AAAA,UACF;AAGA,cAAI,IAAI,SAAS,KAAK,IAAI,OAAO,OAAO,IAAI,OAAO,KAAK;AACtD,kBAAM,SAAS,KAAK,YAAY,IAAI,IAAI,IAAI;AAC5C,gBAAI,QAAQ;AACV,kBAAI,OAAO,YAAa,OAAO,YAAY,KAAK,8BAA+B;AAE7E,qBAAK,KAAK,UAAU,OAAO,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC;AAAA,cACnD,OAAO;AAEL,qBAAK,KAAK,UAAU,OAAO,KAAK,GAAG;AACnC,qBAAK,QAAQ,IAAI,IAAI,MAAM,CAAC,GAAG;AAAA,cACjC;AACA;AAAA,YACF;AAAA,UACF;AAGA,cAAI,YAAY,KAAK,GAAG,GAAG;AACzB,kBAAM,QAAQ,IAAI,QAAQ,GAAG;AAC7B,kBAAM,SAAS,KAAK,YAAY,IAAI,MAAM,GAAG,KAAK,CAAC;AACnD,gBAAI,WAAW,OAAO,YAAY,OAAO,WAAW;AAClD,mBAAK,KAAK,UAAU,OAAO,KAAK,KAAK,IAAI,MAAM,QAAQ,CAAC,CAAC;AACzD;AAAA,YACF;AAAA,UACF;AAMA,cAAI,YAAY,GAAG,GAAG;AACpB,mBAAO;AAAA,UACT;AAGA,eAAK,KAAK,4BAA4B,KAAK,wBAAwB,SAAS,WAAW,KAAK,QAAQ,WAAW,GAAG;AAChH,gBAAI,KAAK,aAAa,GAAG,GAAG;AAC1B,uBAAS,KAAK,GAAG;AACjB,kBAAI,KAAK,SAAS;AAAG,wBAAQ,KAAK,GAAG,IAAI;AACzC;AAAA,YACF,WAAW,QAAQ,KAAK,oBAAoB,KAAK,wBAAwB,GAAG;AAC1E,uBAAS,KAAK,GAAG;AACjB,kBAAI,KAAK,SAAS;AAAG,yBAAS,KAAK,GAAG,IAAI;AAC1C;AAAA,YACF,WAAW,KAAK,qBAAqB;AACnC,sBAAQ,KAAK,GAAG;AAChB,kBAAI,KAAK,SAAS;AAAG,wBAAQ,KAAK,GAAG,IAAI;AACzC;AAAA,YACF;AAAA,UACF;AAGA,cAAI,KAAK,qBAAqB;AAC5B,iBAAK,KAAK,GAAG;AACb,gBAAI,KAAK,SAAS;AAAG,mBAAK,KAAK,GAAG,IAAI;AACtC;AAAA,UACF;AAGA,eAAK,KAAK,GAAG;AAAA,QACf;AAEA,eAAO,EAAE,UAAU,QAAQ;AAAA,MAC7B;AAAA,MAOA,OAAO;AACL,YAAI,KAAK,2BAA2B;AAElC,gBAAM,SAAS,CAAC;AAChB,gBAAM,MAAM,KAAK,QAAQ;AAEzB,mBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,kBAAM,MAAM,KAAK,QAAQ,GAAG,cAAc;AAC1C,mBAAO,OAAO,QAAQ,KAAK,qBAAqB,KAAK,WAAW,KAAK;AAAA,UACvE;AACA,iBAAO;AAAA,QACT;AAEA,eAAO,KAAK;AAAA,MACd;AAAA,MAOA,cAAc,UAAU,MAAM,SAAS;AACrC,aAAK,qBAAqB,YAAY,GAAG;AAAA,GAAa,KAAK,qBAAqB,QAAQ;AACxF,aAAK,MAAM,UAAU,MAAM,OAAO;AAAA,MACpC;AAAA,MASA,gBAAgB,MAAM;AACpB,cAAM,UAAU,qCAAqC;AACrD,aAAK,cAAc,GAAG,6BAA6B,OAAO;AAAA,MAC5D;AAAA,MASA,sBAAsB,QAAQ;AAC5B,cAAM,UAAU,kBAAkB,OAAO;AACzC,aAAK,cAAc,GAAG,mCAAmC,OAAO;AAAA,MAClE;AAAA,MASA,4BAA4B,QAAQ;AAClC,cAAM,UAAU,2BAA2B,OAAO;AAClD,aAAK,cAAc,GAAG,yCAAyC,OAAO;AAAA,MACxE;AAAA,MASA,cAAc,MAAM;AAClB,YAAI,KAAK;AAAqB;AAC9B,cAAM,UAAU,0BAA0B;AAC1C,aAAK,cAAc,GAAG,2BAA2B,OAAO;AAAA,MAC1D;AAAA,MASA,iBAAiB,cAAc;AAC7B,YAAI,KAAK;AAAuB;AAEhC,cAAM,WAAW,KAAK,MAAM;AAC5B,cAAM,IAAK,aAAa,IAAK,KAAK;AAClC,cAAM,gBAAgB,KAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AAC9D,cAAM,UAAU,4BAA4B,2BAA2B,oBAAoB,aAAa,aAAa;AACrH,aAAK,cAAc,GAAG,6BAA6B,OAAO;AAAA,MAC5D;AAAA,MAQA,iBAAiB;AACf,cAAM,eAAe,CAAC,KAAK,KAAK,CAAC;AACjC,iBAAS,YAAY,KAAK,QAAQ,WAAW,YAAY,UAAU,QAAQ;AACzE,uBAAa,QAAQ,UAAU,KAAK,CAAC;AAAA,QACvC;AACA,cAAM,cAAc,aAAa,KAAK,GAAG;AACzC,cAAM,UAAU,2BAA2B,KAAK,KAAK,UAClD,KAAK,iBAAiB,SAAS,eAAe,KAAK,oBAAoB;AAC1E,aAAK,cAAc,GAAG,4BAA4B,OAAO;AAAA,MAC3D;AAAA,MAgBA,QAAQ,KAAK,OAAO,aAAa;AAC/B,YAAI,QAAQ;AAAW,iBAAO,KAAK;AACnC,aAAK,WAAW;AAChB,gBAAQ,SAAS;AACjB,sBAAc,eAAe;AAC7B,cAAM,gBAAgB,KAAK,aAAa,OAAO,WAAW;AAC1D,aAAK,qBAAqB,cAAc,cAAc;AACtD,aAAK,QAAQ,KAAK,aAAa;AAC/B,aAAK,GAAG,YAAY,cAAc,KAAK,GAAG,MAAM;AAC9C,eAAK,qBAAqB,SAAS,GAAG;AAAA,CAAO;AAC7C,eAAK,MAAM,GAAG,qBAAqB,GAAG;AAAA,QACxC,CAAC;AACD,eAAO;AAAA,MACT;AAAA,MASA,YAAY,KAAK,iBAAiB;AAChC,YAAI,QAAQ,UAAa,oBAAoB;AAAW,iBAAO,KAAK;AACpE,aAAK,eAAe;AACpB,aAAK,mBAAmB;AACxB,eAAO;AAAA,MACT;AAAA,MAWA,MAAM,OAAO;AACX,YAAI,UAAU;AAAW,iBAAO,KAAK,SAAS;AAE9C,YAAI,UAAU;AACd,YAAI,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,KAAK,SAAS,SAAS,GAAG,oBAAoB;AAE5F,oBAAU,KAAK,SAAS,KAAK,SAAS,SAAS;AAAA,QACjD;AAEA,YAAI,UAAU,QAAQ;AAAO,gBAAM,IAAI,MAAM,6CAA8C;AAE3F,gBAAQ,SAAS,KAAK,KAAK;AAC3B,eAAO;AAAA,MACT;AAAA,MAWA,QAAQ,SAAS;AAEf,YAAI,YAAY;AAAW,iBAAO,KAAK;AAEvC,gBAAQ,QAAQ,CAAC,UAAU,KAAK,MAAM,KAAK,CAAC;AAC5C,eAAO;AAAA,MACT;AAAA,MASA,MAAM,KAAK;AACT,YAAI,QAAQ,QAAW;AACrB,cAAI,KAAK;AAAQ,mBAAO,KAAK;AAE7B,gBAAM,OAAO,KAAK,MAAM,IAAI,CAAC,QAAQ;AACnC,mBAAO,qBAAqB,GAAG;AAAA,UACjC,CAAC;AACD,iBAAO,CAAC,EAAE;AAAA,YACP,KAAK,QAAQ,UAAU,KAAK,iBAAiB,cAAc,CAAC;AAAA,YAC5D,KAAK,SAAS,SAAS,cAAc,CAAC;AAAA,YACtC,KAAK,MAAM,SAAS,OAAO,CAAC;AAAA,UAC/B,EAAE,KAAK,GAAG;AAAA,QACZ;AAEA,aAAK,SAAS;AACd,eAAO;AAAA,MACT;AAAA,MASA,KAAK,KAAK;AACR,YAAI,QAAQ;AAAW,iBAAO,KAAK;AACnC,aAAK,QAAQ;AACb,eAAO;AAAA,MACT;AAAA,MASA,gBAAgB,gBAAgB;AAC9B,cAAM,SAAS,KAAK,WAAW;AAC/B,YAAI,OAAO,cAAc,QAAW;AAClC,iBAAO,YAAa,kBAAkB,eAAe,QAAS,KAAK,qBAAqB,gBAAgB,IAAI,KAAK,qBAAqB,gBAAgB;AAAA,QACxJ;AACA,eAAO,OAAO,WAAW,MAAM,MAAM;AAAA,MACvC;AAAA,MAMA,gBAAgB,gBAAgB;AAC9B,yBAAiB,kBAAkB,CAAC;AACpC,cAAM,UAAU,EAAE,OAAO,CAAC,CAAC,eAAe,MAAM;AAChD,YAAI;AACJ,YAAI,QAAQ,OAAO;AACjB,kBAAQ,CAAC,QAAQ,KAAK,qBAAqB,SAAS,GAAG;AAAA,QACzD,OAAO;AACL,kBAAQ,CAAC,QAAQ,KAAK,qBAAqB,SAAS,GAAG;AAAA,QACzD;AACA,gBAAQ,QAAQ,eAAe,SAAS;AACxC,gBAAQ,UAAU;AAClB,eAAO;AAAA,MACT;AAAA,MAUA,WAAW,gBAAgB;AACzB,YAAI;AACJ,YAAI,OAAO,mBAAmB,YAAY;AACxC,+BAAqB;AACrB,2BAAiB;AAAA,QACnB;AACA,cAAM,UAAU,KAAK,gBAAgB,cAAc;AAEnD,cAAM,iBAAiB,CAAC;AACxB,YAAI,UAAU;AACd,eAAO,SAAS;AACd,yBAAe,KAAK,OAAO;AAC3B,oBAAU,QAAQ;AAAA,QACpB;AAEA,uBAAe,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAAC,aAAWA,SAAQ,KAAK,iBAAiB,OAAO,CAAC;AAC1F,aAAK,KAAK,cAAc,OAAO;AAE/B,YAAI,kBAAkB,KAAK,gBAAgB,OAAO;AAClD,YAAI,oBAAoB;AACtB,4BAAkB,mBAAmB,eAAe;AACpD,cAAI,OAAO,oBAAoB,YAAY,CAAC,OAAO,SAAS,eAAe,GAAG;AAC5E,kBAAM,IAAI,MAAM,sDAAsD;AAAA,UACxE;AAAA,QACF;AACA,gBAAQ,MAAM,eAAe;AAE7B,aAAK,KAAK,KAAK,aAAa;AAC5B,aAAK,KAAK,aAAa,OAAO;AAC9B,uBAAe,QAAQ,CAAAA,aAAWA,SAAQ,KAAK,gBAAgB,OAAO,CAAC;AAAA,MACzE;AAAA,MAYA,WAAW,OAAO,aAAa;AAC7B,YAAI,OAAO,UAAU,WAAW;AAC9B,eAAK,iBAAiB;AACtB,iBAAO;AAAA,QACT;AACA,aAAK,aAAa,SAAS,KAAK;AAChC,aAAK,mBAAmB,eAAe,KAAK;AAE5C,cAAM,YAAY,kBAAkB,KAAK,UAAU;AACnD,aAAK,iBAAiB,UAAU;AAChC,aAAK,gBAAgB,UAAU;AAE/B,eAAO;AAAA,MACT;AAAA,MAUA,KAAK,gBAAgB;AACnB,aAAK,WAAW,cAAc;AAC9B,YAAI,WAAW,QAAQ,YAAY;AACnC,YAAI,aAAa,KAAK,kBAAkB,OAAO,mBAAmB,cAAc,eAAe,OAAO;AACpG,qBAAW;AAAA,QACb;AAEA,aAAK,MAAM,UAAU,kBAAkB,cAAc;AAAA,MACvD;AAAA,MAYA,YAAY,UAAU,MAAM;AAC1B,cAAM,gBAAgB,CAAC,aAAa,UAAU,SAAS,UAAU;AACjE,YAAI,CAAC,cAAc,SAAS,QAAQ,GAAG;AACrC,gBAAM,IAAI,MAAM;AAAA,oBACF,cAAc,KAAK,MAAM,IAAI;AAAA,QAC7C;AACA,cAAM,YAAY,GAAG;AACrB,aAAK,GAAG,WAAW,CAAC,YAAY;AAC9B,cAAI;AACJ,cAAI,OAAO,SAAS,YAAY;AAC9B,sBAAU,KAAK,EAAE,OAAO,QAAQ,OAAO,SAAS,QAAQ,QAAQ,CAAC;AAAA,UACnE,OAAO;AACL,sBAAU;AAAA,UACZ;AAEA,cAAI,SAAS;AACX,oBAAQ,MAAM,GAAG;AAAA,CAAW;AAAA,UAC9B;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF;AAMA,cAAU,OAAO,UAAU,IAAI,QAAQ;AACvC,YAAQ,UAAU;AAMlB,YAAQ,UAAU;AAClB,YAAQ,SAAS;AACjB,YAAQ,iBAAiB;AACzB,YAAQ,6BAA6B;AACrC,YAAQ,OAAO;AAUf,aAAS,UAAU,MAAM;AACvB,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC,KAAK,SAAS;AAC3C,eAAO,MAAM,KAAK,GAAG,YAAY,IAAI,KAAK,MAAM,CAAC;AAAA,MACnD,CAAC;AAAA,IACH;AAUA,aAAS,sBAAsB,KAAK,MAAM;AACxC,YAAM,aAAa,IAAI,kBAAkB,KAAK,KAAK,SAAO,QAAQ,IAAI,iBAAiB,QAAQ,IAAI,cAAc;AACjH,UAAI,YAAY;AACd,YAAI,WAAW;AAEf,YAAI,MAAM,GAAG,2BAA2B,cAAc;AAAA,MACxD;AAAA,IACF;AAUA,aAAS,qBAAqB,KAAK;AACjC,YAAM,aAAa,IAAI,QAAQ,IAAI,aAAa,OAAO,QAAQ;AAE/D,aAAO,IAAI,WACP,MAAM,aAAa,MACnB,MAAM,aAAa;AAAA,IACzB;AAQA,aAAS,kBAAkB,OAAO;AAChC,UAAI;AACJ,UAAI;AAGJ,YAAM,YAAY,MAAM,MAAM,QAAQ;AACtC,UAAI,UAAU,SAAS,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;AAAG,oBAAY,UAAU,MAAM;AACrF,iBAAW,UAAU,MAAM;AAE3B,UAAI,CAAC,aAAa,UAAU,KAAK,QAAQ,GAAG;AAC1C,oBAAY;AACZ,mBAAW;AAAA,MACb;AACA,aAAO,EAAE,WAAW,SAAS;AAAA,IAC/B;AAUA,aAAS,2BAA2B,MAAM;AAKxC,aAAO,KAAK,IAAI,CAAC,QAAQ;AACvB,YAAI,CAAC,IAAI,WAAW,WAAW,GAAG;AAChC,iBAAO;AAAA,QACT;AACA,YAAI;AACJ,YAAI,YAAY;AAChB,YAAI,YAAY;AAChB,YAAI;AACJ,aAAK,QAAQ,IAAI,MAAM,sBAAsB,OAAO,MAAM;AAExD,wBAAc,MAAM;AAAA,QACtB,YAAY,QAAQ,IAAI,MAAM,oCAAoC,OAAO,MAAM;AAC7E,wBAAc,MAAM;AACpB,cAAI,QAAQ,KAAK,MAAM,EAAE,GAAG;AAE1B,wBAAY,MAAM;AAAA,UACpB,OAAO;AAEL,wBAAY,MAAM;AAAA,UACpB;AAAA,QACF,YAAY,QAAQ,IAAI,MAAM,0CAA0C,OAAO,MAAM;AAEnF,wBAAc,MAAM;AACpB,sBAAY,MAAM;AAClB,sBAAY,MAAM;AAAA,QACpB;AAEA,YAAI,eAAe,cAAc,KAAK;AACpC,iBAAO,GAAG,eAAe,aAAa,SAAS,SAAS,IAAI;AAAA,QAC9D;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA;AAAA;",
  "names": ["cmd", "command"]
}
