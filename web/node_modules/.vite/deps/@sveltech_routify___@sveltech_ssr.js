import {
  require_api,
  require_browser
} from "./chunk-6LI3NU7R.js";
import "./chunk-IHTNH6U6.js";
import "./chunk-2ON3BNMZ.js";
import "./chunk-D5DNCRWQ.js";
import {
  require_fs
} from "./chunk-RJQ5QLWH.js";
import "./chunk-6P42AMXB.js";
import {
  __commonJS
} from "./chunk-OROXOI2D.js";

// node_modules/@sveltech/ssr/ssr.js
var require_ssr = __commonJS({
  "node_modules/@sveltech/ssr/ssr.js"(exports, module) {
    var { JSDOM } = require_api();
    var fs = require_fs();
    var fetch = require_browser();
    var defaults = {
      host: "http://jsdom.ssr",
      eventName: "app-loaded",
      beforeEval() {
      },
      afterEval() {
      },
      meta: { "data-render": "ssr" }
    };
    module.exports.ssr = async function ssr(template, script, url, options) {
      const start = Date.now();
      const { host, eventName, beforeEval, afterEval, meta } = { ...defaults, ...options };
      template = fs.existsSync(template) ? fs.readFileSync(template, "utf8") : template;
      script = fs.existsSync(script) ? fs.readFileSync(script, "utf8") : script;
      return new Promise(async (resolve, reject) => {
        try {
          const dom = await new JSDOM(template, { runScripts: "outside-only", url: host + url });
          dom.window.rendering = true;
          dom.window.alert = (_msg) => {
          };
          dom.window.scrollTo = () => {
          };
          dom.window.requestAnimationFrame = () => {
          };
          dom.window.cancelAnimationFrame = () => {
          };
          dom.window.fetch = fetch;
          dom.window.addEventListener(eventName, async () => {
            afterEval(dom);
            const html = dom.serialize();
            resolve(html);
            dom.window.close();
            console.log(`${url} - ${Date.now() - start}ms`);
          });
          await beforeEval(dom);
          if (meta)
            setMeta(dom, meta);
          dom.window.eval(script);
        } catch (err) {
          handleError(err, url);
        }
      });
    };
    function setMeta(dom, meta) {
      const metaElem = dom.window.document.createElement("meta");
      Object.entries(meta).forEach(([key, value]) => {
        metaElem.setAttribute(key, value);
      });
      dom.window.document.getElementsByTagName("head")[0].appendChild(metaElem);
    }
    function handleError(err, url) {
      console.log("url:", url);
      throw Error(err);
    }
  }
});
export default require_ssr();
//# sourceMappingURL=@sveltech_routify___@sveltech_ssr.js.map
